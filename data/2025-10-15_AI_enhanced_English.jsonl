{"id": "2510.11722", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.11722", "abs": "https://arxiv.org/abs/2510.11722", "authors": ["Haruhiko Yoshioka", "Kazumasa Shimari", "Hidetake Uwano", "Kenichi Matsumoto"], "title": "eye2vec: Learning Distributed Representations of Eye Movement for Program Comprehension Analysis", "comment": "2 pages, 1 figure, conference", "summary": "This paper presents eye2vec, an infrastructure for analyzing software\ndevelopers' eye movements while reading source code. In common eye-tracking\nstudies in program comprehension, researchers must preselect analysis targets\nsuch as control flow or syntactic elements, and then develop analysis methods\nto extract appropriate metrics from the fixation for source code. Here,\nresearchers can define various levels of AOIs like words, lines, or code\nblocks, and the difference leads to different results. Moreover, the\ninterpretation of fixation for word/line can vary across the purposes of the\nanalyses. Hence, the eye-tracking analysis is a difficult task that depends on\nthe time-consuming manual work of the researchers. eye2vec represents\ncontinuous two fixations as transitions between syntactic elements using\ndistributed representations. The distributed representation facilitates the\nadoption of diverse data analysis methods with rich semantic interpretations.", "AI": {"tldr": "eye2vec is an infrastructure that represents developers' eye movement transitions between syntactic elements using distributed representations to simplify eye-tracking analysis in program comprehension studies.", "motivation": "Traditional eye-tracking studies require researchers to manually predefine analysis targets and metrics, which is time-consuming and leads to varying results depending on how Areas of Interest (AOIs) are defined.", "method": "The system represents continuous eye fixations as transitions between syntactic elements using distributed representations, enabling semantic interpretation of eye movement patterns.", "result": "The distributed representation approach facilitates the adoption of diverse data analysis methods with rich semantic interpretations for eye-tracking data.", "conclusion": "eye2vec provides a more flexible and automated infrastructure for analyzing developers' eye movements during code reading, reducing manual effort and enabling richer semantic analysis."}}
{"id": "2510.11813", "categories": ["cs.SE", "cs.CL", "cs.DB"], "pdf": "https://arxiv.org/pdf/2510.11813", "abs": "https://arxiv.org/abs/2510.11813", "authors": ["Marcus Emmanuel Barnes", "Taher A. Ghaleb", "Safwat Hassan"], "title": "Task-Aware Reduction for Scalable LLM-Database Systems", "comment": "Preprint. Accepted for presentation at the Workshop on Language\n  Models and Databases (LMD), co-located with CASCON 2025 (IEEE). The final\n  version will appear in IEEE Xplore", "summary": "Large Language Models (LLMs) are increasingly applied to data-intensive\nworkflows, from database querying to developer observability. Yet the\neffectiveness of these systems is constrained by the volume, verbosity, and\nnoise of real-world text-rich data such as logs, telemetry, and monitoring\nstreams. Feeding such data directly into LLMs is costly, environmentally\nunsustainable, and often misaligned with task objectives. Parallel efforts in\nLLM efficiency have focused on model- or architecture-level optimizations, but\nthe challenge of reducing upstream input verbosity remains underexplored. In\nthis paper, we argue for treating the token budget of an LLM as an attention\nbudget and elevating task-aware text reduction as a first-class design\nprinciple for language -- data systems. We position input-side reduction not as\ncompression, but as attention allocation: prioritizing information most\nrelevant to downstream tasks. We outline open research challenges for building\nbenchmarks, designing adaptive reduction pipelines, and integrating\ntoken-budget--aware preprocessing into database and retrieval systems. Our\nvision is to channel scarce attention resources toward meaningful signals in\nnoisy, data-intensive workflows, enabling scalable, accurate, and sustainable\nLLM--data integration.", "AI": {"tldr": "LLMs face challenges with verbose, noisy data in workflows. Treating token budget as attention budget and prioritizing task-relevant information through text reduction can improve efficiency and sustainability.", "motivation": "LLMs are increasingly used in data-intensive workflows but struggle with verbose, noisy data like logs and telemetry. Directly feeding such data is costly, unsustainable, and misaligned with tasks. Current efficiency efforts focus on model-level optimizations while input verbosity reduction remains underexplored.", "method": "Propose treating LLM token budget as an attention budget and elevating task-aware text reduction as a core design principle. Position input-side reduction as attention allocation rather than compression, prioritizing information relevant to downstream tasks.", "result": "The paper outlines research challenges for building benchmarks, designing adaptive reduction pipelines, and integrating token-budget-aware preprocessing into database and retrieval systems.", "conclusion": "Channeling scarce attention resources toward meaningful signals in noisy data-intensive workflows enables scalable, accurate, and sustainable LLM-data integration."}}
{"id": "2510.11838", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.11838", "abs": "https://arxiv.org/abs/2510.11838", "authors": ["Xu Yang", "Jiayuan Zhou", "Michael Pacheco", "Wenhan Zhu", "Pengfei He", "Shaowei Wang", "Kui Liu", "Ruiqi Pan"], "title": "Lingxi: Repository-Level Issue Resolution Framework Enhanced by Procedural Knowledge Guided Scaling", "comment": null, "summary": "Driven by the advancements of Large Language Models (LLMs), LLM-powered\nagents are making significant improvements in software engineering tasks, yet\nstruggle with complex, repository-level issue resolution. Existing agent-based\nmethods have two key limitations. First, they lack of procedural knowledge\n(i.e., how an issue is fixed step-by-step and rationales behind it) to learn\nand leverage for issue resolution. Second, they rely on massive computational\npower to blindly explore the solution space. % To address those limitations, we\npropose Lingxi, an issue resolution framework that leverages procedural\nknowledge extracted from historical issue-fixing data to guide agents in\nsolving repository-level issues. \\ourTool first constructs this knowledge\noffline through a hierarchical abstraction mechanism, enabling agents to learn\nthe how and why behind a fix, not just the final solution. During online\napplication, it employs a knowledge-driven scaling method that leverages the\nprocedural knowledge of similar issues to intelligently analyze the target\nissue from multiple perspectives, in sharp contrast to undirected, brute-force\nexploration. % Lingxi successfully resolves 74.6\\% of bugs on the SWE-bench\nVerified benchmark in Past@1 setting, outperforming five state-of-the-art\ntechniques by a significant margin (5.4\\% to 14.9\\%). Our comprehensive\nablation study confirmed that the success of Lingxi comes directly from its use\nof procedural knowledge. Without it, the performance gains from scaling alone\nis negligible. Our qualitative study further shows that the ``design patterns\n$\\&$ coding practices'' is the most critical knowledge aspect, and that the\nroles of different knowledge aspects switch across different stages (i.e.,\nanalysis, planning, and fixing).", "AI": {"tldr": "Lingxi is an LLM-powered framework that uses procedural knowledge from historical issue-fixing data to guide agents in solving repository-level software engineering issues, achieving 74.6% success rate on SWE-bench.", "motivation": "Existing LLM-powered agents struggle with complex repository-level issue resolution due to lack of procedural knowledge and reliance on brute-force computational exploration.", "method": "Constructs procedural knowledge offline through hierarchical abstraction, then uses knowledge-driven scaling to analyze target issues from multiple perspectives using knowledge from similar historical issues.", "result": "Achieves 74.6% bug resolution rate on SWE-bench Verified benchmark, outperforming five state-of-the-art techniques by 5.4% to 14.9%. Ablation studies confirm procedural knowledge is crucial for performance gains.", "conclusion": "Procedural knowledge extraction and application is key to effective repository-level issue resolution, with 'design patterns & coding practices' being the most critical knowledge aspect, and different knowledge aspects playing varying roles across analysis, planning, and fixing stages."}}
{"id": "2510.11872", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.11872", "abs": "https://arxiv.org/abs/2510.11872", "authors": ["Alessandro Cornacchia", "Vaastav Anand", "Muhammad Bilal", "Zafar Qazi", "Marco Canini"], "title": "DMAS-Forge: A Framework for Transparent Deployment of AI Applications as Distributed Systems", "comment": "1st Workshop on Systems for Agentic AI (SAA '25)", "summary": "Agentic AI applications increasingly rely on multiple agents with distinct\nroles, specialized tools, and access to memory layers to solve complex tasks --\nclosely resembling service-oriented architectures. Yet, in the rapid evolving\nlandscape of programming frameworks and new protocols, deploying and testing AI\nagents as distributed systems remains a daunting and labor-intensive task. We\npresent DMAS-Forge, a framework designed to close this gap. DMAS-Forge\ndecouples application logic from specific deployment choices, and aims at\ntransparently generating the necessary glue code and configurations to spawn\ndistributed multi-agent applications across diverse deployment scenarios with\nminimal manual effort. We present our vision, design principles, and a\nprototype of DMAS-Forge. Finally, we discuss the opportunities and future work\nfor our approach.", "AI": {"tldr": "DMAS-Forge is a framework that simplifies deploying and testing distributed multi-agent AI systems by decoupling application logic from deployment choices and automatically generating necessary code.", "motivation": "Deploying and testing AI agents as distributed systems is challenging due to the rapidly evolving landscape of programming frameworks and protocols, requiring significant manual effort.", "method": "DMAS-Forge decouples application logic from specific deployment choices and transparently generates the necessary glue code and configurations to spawn distributed multi-agent applications across diverse deployment scenarios.", "result": "The framework enables minimal manual effort deployment of distributed multi-agent applications across various scenarios, with a prototype implementation presented.", "conclusion": "DMAS-Forge addresses the complexity of deploying distributed AI agent systems and presents opportunities for future development in this area."}}
{"id": "2510.12011", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12011", "abs": "https://arxiv.org/abs/2510.12011", "authors": ["Bei Zhou", "Maximilian Balmus", "Cesare Corrado", "Ludovica Cicci", "Shuang Qian", "Steven A. Niederer"], "title": "TorchCor: High-Performance Cardiac Electrophysiology Simulations with the Finite Element Method on GPUs", "comment": null, "summary": "Cardiac electrophysiology (CEP) simulations are increasingly used for\nunderstanding cardiac arrhythmias and guiding clinical decisions. However,\nthese simulations typically require high-performance computing resources with\nnumerous CPU cores, which are often inaccessible to many research groups and\nclinicians. To address this, we present TorchCor, a high-performance Python\nlibrary for CEP simulations using the finite element method on general-purpose\nGPUs. Built on PyTorch, TorchCor significantly accelerates CEP simulations,\nparticularly for large 3D meshes. The accuracy of the solver is verified\nagainst manufactured analytical solutions and the $N$-version benchmark\nproblem. TorchCor is freely available for both academic and commercial use\nwithout restrictions.", "AI": {"tldr": "TorchCor is a high-performance Python library for cardiac electrophysiology simulations using GPUs, built on PyTorch to accelerate simulations especially for large 3D meshes.", "motivation": "Cardiac electrophysiology simulations typically require high-performance computing with many CPU cores, which are often inaccessible to many research groups and clinicians.", "method": "Developed TorchCor, a Python library using finite element method on general-purpose GPUs, built on PyTorch framework.", "result": "Significantly accelerates CEP simulations, particularly for large 3D meshes. Accuracy verified against analytical solutions and benchmark problems.", "conclusion": "TorchCor provides accessible high-performance CEP simulation capabilities and is freely available for both academic and commercial use without restrictions."}}
{"id": "2510.12082", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.12082", "abs": "https://arxiv.org/abs/2510.12082", "authors": ["Huy Nguyen", "Christoph Treude", "Patanamon Thongtanunam"], "title": "Enhancing Neural Code Representation with Additional Context", "comment": "34 pages, 7 figures, 11 tables", "summary": "Automated program comprehension underpins many software engineering tasks,\nfrom code summarisation to clone detection. Recent deep learning models achieve\nstrong results but typically rely on source code alone, overlooking contextual\ninformation such as version history or structural relationships. This limits\ntheir ability to capture how code evolves and operates. We conduct an empirical\nstudy on how enriching code representations with such contextual signals\naffects neural model performance on key comprehension tasks. Two downstream\ntasks, code clone detection and code summarisation, are evaluated using SeSaMe\n(1,679 Java methods) and CodeSearchNet (63,259 methods). Five representative\nmodels (CodeBERT, GraphCodeBERT, CodeT5, PLBART, ASTNN) are fine-tuned under\ncode-only and context-augmented settings. Results show that context generally\nimproves performance: version history consistently boosts clone detection\n(e.g., CodeT5 +15.92% F1) and summarisation (e.g., GraphCodeBERT +5.56%\nMETEOR), while call-graph effects vary by model and task. Combining multiple\ncontexts yields further gains (up to +21.48% macro-F1). Human evaluation on 100\nJava snippets confirms that context-augmented summaries are significantly\npreferred for Accuracy and Content Adequacy (p <= 0.026; |delta| up to 0.55).\nThese findings highlight the potential of contextual signals to enhance code\ncomprehension and open new directions for optimising contextual encoding in\nneural SE models.", "AI": {"tldr": "Contextual information (version history and call graphs) significantly improves neural models' performance on code comprehension tasks like clone detection and code summarization.", "motivation": "Current deep learning models for program comprehension rely solely on source code, missing important contextual signals like version history and structural relationships that could enhance understanding of code evolution and operation.", "method": "Empirical study evaluating 5 neural models (CodeBERT, GraphCodeBERT, CodeT5, PLBART, ASTNN) on two datasets (SeSaMe and CodeSearchNet) for clone detection and code summarization tasks, comparing code-only vs context-augmented settings with version history and call graphs.", "result": "Context generally improves performance: version history consistently boosts clone detection (e.g., CodeT5 +15.92% F1) and summarization (e.g., GraphCodeBERT +5.56% METEOR), with combined contexts yielding up to +21.48% macro-F1 improvement. Human evaluation shows significant preference for context-augmented summaries.", "conclusion": "Contextual signals have strong potential to enhance code comprehension and open new directions for optimizing contextual encoding in neural software engineering models."}}
{"id": "2510.12120", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12120", "abs": "https://arxiv.org/abs/2510.12120", "authors": ["Zhenyu Mao", "Jacky Keung", "Fengji Zhang", "Shuo Liu", "Yifei Wang", "Jialong Li"], "title": "Towards Engineering Multi-Agent LLMs: A Protocol-Driven Approach", "comment": null, "summary": "The increasing demand for software development has driven interest in\nautomating software engineering (SE) tasks using Large Language Models (LLMs).\nRecent efforts extend LLMs into multi-agent systems (MAS) that emulate\ncollaborative development workflows, but these systems often fail due to three\ncore deficiencies: under-specification, coordination misalignment, and\ninappropriate verification, arising from the absence of foundational SE\nstructuring principles. This paper introduces Software Engineering Multi-Agent\nProtocol (SEMAP), a protocol-layer methodology that instantiates three core SE\ndesign principles for multi-agent LLMs: (1) explicit behavioral contract\nmodeling, (2) structured messaging, and (3) lifecycle-guided execution with\nverification, and is implemented atop Google's Agent-to-Agent (A2A)\ninfrastructure. Empirical evaluation using the Multi-Agent System Failure\nTaxonomy (MAST) framework demonstrates that SEMAP effectively reduces failures\nacross different SE tasks. In code development, it achieves up to a 69.6%\nreduction in total failures for function-level development and 56.7% for\ndeployment-level development. For vulnerability detection, SEMAP reduces\nfailure counts by up to 47.4% on Python tasks and 28.2% on C/C++ tasks.", "AI": {"tldr": "SEMAP is a protocol-layer methodology that applies software engineering principles to multi-agent LLM systems, reducing failures in SE tasks through explicit contracts, structured messaging, and lifecycle-guided execution.", "motivation": "Current multi-agent LLM systems for software engineering often fail due to under-specification, coordination misalignment, and inappropriate verification, lacking foundational SE structuring principles.", "method": "SEMAP implements three core SE design principles: explicit behavioral contract modeling, structured messaging, and lifecycle-guided execution with verification, built atop Google's Agent-to-Agent infrastructure.", "result": "SEMAP reduces failures significantly across SE tasks: up to 69.6% reduction in function-level code development, 56.7% in deployment-level development, 47.4% in Python vulnerability detection, and 28.2% in C/C++ vulnerability detection.", "conclusion": "SEMAP effectively addresses core deficiencies in multi-agent LLM systems for software engineering by applying structured SE principles, demonstrating substantial failure reduction across various development and security tasks."}}
{"id": "2510.12186", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12186", "abs": "https://arxiv.org/abs/2510.12186", "authors": ["Yun Peng", "Kisub Kim", "Linghan Meng", "Kui Liu"], "title": "iCodeReviewer: Improving Secure Code Review with Mixture of Prompts", "comment": null, "summary": "Code review is an essential process to ensure the quality of software that\nidentifies potential software issues at an early stage of software development.\nAmong all software issues, security issues are the most important to identify,\nas they can easily lead to severe software crashes and service disruptions.\nRecent research efforts have been devoted to automated approaches to reduce the\nmanual efforts required in the secure code review process. Despite the\nprogress, current automated approaches on secure code review, including static\nanalysis, deep learning models, and prompting approaches, still face the\nchallenges of limited precision and coverage, and a lack of comprehensive\nevaluation.\n  To mitigate these challenges, we propose iCodeReviewer, which is an automated\nsecure code review approach based on large language models (LLMs).\niCodeReviewer leverages a novel mixture-of-prompts architecture that\nincorporates many prompt experts to improve the coverage of security issues.\nEach prompt expert is a dynamic prompt pipeline to check the existence of a\nspecific security issue. iCodeReviewer also implements an effective routing\nalgorithm to activate only necessary prompt experts based on the code features\nin the input program, reducing the false positives induced by LLM\nhallucination. Experiment results in our internal dataset demonstrate the\neffectiveness of iCodeReviewer in security issue identification and\nlocalization with an F1 of 63.98%. The review comments generated by\niCodeReviewer also achieve a high acceptance rate up to 84% when it is deployed\nin production environments.", "AI": {"tldr": "iCodeReviewer is an automated secure code review system using LLMs with a mixture-of-prompts architecture and routing algorithm to improve security issue detection with 63.98% F1 score and 84% acceptance rate.", "motivation": "Current automated secure code review approaches (static analysis, deep learning, prompting) have limited precision, coverage, and lack comprehensive evaluation, creating a need for more effective solutions.", "method": "Uses large language models with mixture-of-prompts architecture where multiple prompt experts check specific security issues, plus routing algorithm to activate only necessary experts based on code features.", "result": "Achieved 63.98% F1 score for security issue identification and localization, with 84% acceptance rate for generated review comments in production environments.", "conclusion": "iCodeReviewer effectively addresses limitations of existing approaches by combining LLMs with specialized prompt experts and intelligent routing, demonstrating practical value in real-world deployment."}}
{"id": "2510.12294", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12294", "abs": "https://arxiv.org/abs/2510.12294", "authors": ["Gerg\u0151 Balogh", "D\u00e1vid K\u00f3sz\u00f3", "Homayoun Safarpour Motealegh Mahalegi", "L\u00e1szl\u00f3 T\u00f3th", "Bence Szak\u00e1cs", "\u00c1ron B\u00facs\u00fa"], "title": "Show Your Title! A Scoping Review on Verbalization in Software Engineering with LLM-Assisted Screening", "comment": "preprint of a paper under publication in Quality of Information and\n  Communications Technology 2025", "summary": "Understanding how software developers think, make decisions, and behave\nremains a key challenge in software engineering (SE). Verbalization techniques\n(methods that capture spoken or written thought processes) offer a lightweight\nand accessible way to study these cognitive aspects. This paper presents a\nscoping review of research at the intersection of SE and psychology (PSY),\nfocusing on the use of verbal data. To make large-scale interdisciplinary\nreviews feasible, we employed a large language model (LLM)-assisted screening\npipeline using GPT to assess the relevance of over 9,000 papers based solely on\ntitles. We addressed two questions: what themes emerge from\nverbalization-related work in SE, and how effective are LLMs in supporting\ninterdisciplinary review processes? We validated GPT's outputs against human\nreviewers and found high consistency, with a 13\\% disagreement rate. Prominent\nthemes mainly were tied to the craft of SE, while more human-centered topics\nwere underrepresented. The data also suggests that SE frequently draws on PSY\nmethods, whereas the reverse is rare.", "AI": {"tldr": "This paper presents an LLM-assisted scoping review of verbalization techniques in software engineering research, examining themes and evaluating LLM effectiveness for interdisciplinary reviews.", "motivation": "To understand how software developers think and behave, and to explore the feasibility of using LLMs for large-scale interdisciplinary literature reviews.", "method": "Used GPT-based LLM screening pipeline to assess relevance of 9,000+ papers from SE-psychology intersection, focusing on verbal data methods, with human validation of LLM outputs.", "result": "Found high consistency between GPT and human reviewers (13% disagreement rate), identified prominent SE craft themes with underrepresented human-centered topics, and observed one-way knowledge flow from psychology to SE.", "conclusion": "LLMs are effective for interdisciplinary review processes, verbalization techniques provide valuable insights into developer cognition, and there's an opportunity for more balanced knowledge exchange between SE and psychology."}}
{"id": "2510.12364", "categories": ["cs.SE", "cs.AI", "cs.HC", "D.2.3"], "pdf": "https://arxiv.org/pdf/2510.12364", "abs": "https://arxiv.org/abs/2510.12364", "authors": ["Kevin Krings", "Nino S. Bohn", "Thomas Ludwig"], "title": "(R)evolution of Programming: Vibe Coding as a Post-Coding Paradigm", "comment": "Workshop Submission at the sixth decennial Aarhus conference in\n  Workshop \"The End of Programming (as we know it) - Envisioning Radical\n  Re-Conceptualizations of Co-Coding with AI\"", "summary": "Recent advancements in generative artificial intelligence (GenAI),\nparticularly large language models, have introduced new possibilities for\nsoftware development practices. In our paper we investigate the emerging Vibe\nCoding (VC) paradigm that emphasizes intuitive, affect-driven, and\nimprovisational interactions between developers and AI systems. Building upon\nthe discourse of End-User Development (EUD), we explore how VC diverges from\nconventional programming approaches such as those supported by tools like\nGitHub Copilot. Through five semi-structured interview sessions with ten\nexperienced software practitioners, we identify five thematic dimensions:\ncreativity, sustainability, the future of programming, collaboration, and\ncriticism. Our analysis conceptualizes VC within the metaphor of co-drifting,\ncontrasting it with the prevalent co-piloting perspective of AI-assisted\ndevelopment. We argue that VC reconfigures the developers role, blurring\nboundaries between professional and non-developers. While VC enables novel\nforms of expression and rapid prototyping, it also introduces challenges\nregarding reproducibility, scalability, and inclusivity. We propose that VC\nrepresents a meaningful shift in programming culture, warranting further\ninvestigation within human-computer interaction (HCI) and software engineering\nresearch.", "AI": {"tldr": "The paper investigates Vibe Coding (VC) - an intuitive, affect-driven programming paradigm that contrasts with conventional AI-assisted development approaches like GitHub Copilot, using interviews with practitioners to identify key themes and conceptualizing VC as co-drifting rather than co-piloting.", "motivation": "To explore how emerging GenAI capabilities enable new intuitive programming practices that diverge from conventional approaches, and understand the implications of this Vibe Coding paradigm for software development culture.", "method": "Conducted five semi-structured interview sessions with ten experienced software practitioners to identify thematic dimensions of Vibe Coding.", "result": "Identified five key themes: creativity, sustainability, future of programming, collaboration, and criticism. Conceptualized VC as co-drifting (contrasting with co-piloting), showing it reconfigures developer roles and blurs boundaries between professionals and non-developers.", "conclusion": "Vibe Coding represents a meaningful shift in programming culture that enables novel expression and rapid prototyping but introduces challenges in reproducibility, scalability, and inclusivity, warranting further HCI and software engineering research."}}
{"id": "2510.12397", "categories": ["cs.SE", "cs.DC", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.12397", "abs": "https://arxiv.org/abs/2510.12397", "authors": ["S\u00f6ren Henning", "Adriano Vogel", "Esteban Perez-Wohlfeil", "Otmar Ertl", "Rick Rabiser"], "title": "Should I Run My Cloud Benchmark on Black Friday?", "comment": "Accepted for the 16th Symposium on Software Performance 2025", "summary": "Benchmarks and performance experiments are frequently conducted in cloud\nenvironments. However, their results are often treated with caution, as the\npresumed high variability of performance in the cloud raises concerns about\nreproducibility and credibility. In a recent study, we empirically quantified\nthe impact of this variability on benchmarking results by repeatedly executing\na stream processing application benchmark at different times of the day over\nseveral months. Our analysis confirms that performance variability is indeed\nobservable at the application level, although it is less pronounced than often\nassumed. The larger scale of our study compared to related work allowed us to\nidentify subtle daily and weekly performance patterns. We now extend this\ninvestigation by examining whether a major global event, such as Black Friday,\naffects the outcomes of performance benchmarks.", "AI": {"tldr": "Examines how major global events like Black Friday impact cloud benchmarking performance variability.", "motivation": "To investigate if major global events affect cloud performance benchmark results, building on previous findings about daily/weekly performance patterns.", "method": "Extended previous study by examining performance benchmarks during Black Friday, comparing results to normal periods.", "result": "Found that performance variability exists at application level but is less pronounced than commonly assumed; identified subtle daily/weekly patterns.", "conclusion": "Major global events can impact cloud benchmarking performance, confirming the need to consider temporal factors in cloud performance experiments."}}
{"id": "2510.12478", "categories": ["cs.SE", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2510.12478", "abs": "https://arxiv.org/abs/2510.12478", "authors": ["\u00d8ystein Haugen", "Stefan Klikovits", "Martin Arthur Andersen", "Jonathan Beaulieu", "Francis Bordeleau", "Joachim Denil", "Joost Mertens"], "title": "DarTwin made precise by SysMLv2 -- An Experiment", "comment": null, "summary": "The new SysMLv2 adds mechanisms for the built-in specification of\ndomain-specific concepts and language extensions. This feature promises to\nfacilitate the creation of Domain-Specific Languages (DSLs) and interfacing\nwith existing system descriptions and technical designs. In this paper, we\nreview these features and evaluate SysMLv2's capabilities using concrete use\ncases. We develop DarTwin DSL, a DSL that formalizes the existing DarTwin\nnotation for Digital Twin (DT) evolution, through SysMLv2, thereby supposedly\nenabling the wide application of DarTwin's evolution templates using any\nSysMLv2 tool. We demonstrate DarTwin DSL, but also point out limitations in the\ncurrently available tooling of SysMLv2 in terms of graphical notation\ncapabilities. This work contributes to the growing field of Model-Driven\nEngineering (MDE) for DTs and combines it with the release of SysMLv2, thus\nintegrating a systematic approach with DT evolution management in systems\nengineering.", "AI": {"tldr": "SysMLv2 enables domain-specific language creation for Digital Twin evolution management, demonstrated through DarTwin DSL development, though current tooling has graphical notation limitations.", "motivation": "To evaluate SysMLv2's new domain-specific language extension capabilities and apply them to Digital Twin evolution management by formalizing the existing DarTwin notation.", "method": "Developed DarTwin DSL through SysMLv2 to formalize Digital Twin evolution notation, evaluated using concrete use cases and existing tooling capabilities.", "result": "Successfully created DarTwin DSL enabling wide application of evolution templates using SysMLv2 tools, but identified limitations in current graphical notation capabilities.", "conclusion": "SysMLv2 effectively facilitates DSL creation for Digital Twin evolution management, integrating systematic approaches with systems engineering, though tooling improvements are needed for better graphical support."}}
{"id": "2510.12487", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.12487", "abs": "https://arxiv.org/abs/2510.12487", "authors": ["Evgeniy Glukhov", "Michele Conti", "Egor Bogomolov", "Yaroslav Golubev", "Alexander Bezzubov"], "title": "Diff-XYZ: A Benchmark for Evaluating Diff Understanding", "comment": null, "summary": "Reliable handling of code diffs is central to agents that edit and refactor\nrepositories at scale. We introduce Diff-XYZ, a compact benchmark for code-diff\nunderstanding with three supervised tasks: apply (old code $+$ diff\n$\\rightarrow$ new code), anti-apply (new code $-$ diff $\\rightarrow$ old code),\nand diff generation (new code $-$ old code $\\rightarrow$ diff). Instances in\nthe benchmark are triples $\\langle \\textit{old code}, \\textit{new code},\n\\textit{diff} \\rangle$ drawn from real commits in CommitPackFT, paired with\nautomatic metrics and a clear evaluation protocol. We use the benchmark to do a\nfocused empirical study of the unified diff format and run a cross-format\ncomparison of different diff representations. Our findings reveal that\ndifferent formats should be used depending on the use case and model size. For\nexample, representing diffs in search-replace format is good for larger models\nin the diff generation scenario, yet not suited well for diff analysis and\nsmaller models. The Diff-XYZ benchmark is a reusable foundation for assessing\nand improving diff handling in LLMs that can aid future development of diff\nformats and models editing code. The dataset is published on HuggingFace Hub:\nhttps://huggingface.co/datasets/JetBrains-Research/diff-xyz.", "AI": {"tldr": "Diff-XYZ is a benchmark for code-diff understanding with three tasks: apply, anti-apply, and diff generation, using real commits from CommitPackFT.", "motivation": "Reliable handling of code diffs is crucial for agents that edit and refactor repositories at scale, requiring a standardized benchmark for evaluation.", "method": "The benchmark consists of triples (old code, new code, diff) from real commits, with automatic metrics and evaluation protocol. It studies unified diff format and compares different diff representations.", "result": "Different diff formats perform better depending on use case and model size. Search-replace format works well for larger models in diff generation but not for diff analysis and smaller models.", "conclusion": "Diff-XYZ provides a reusable foundation for assessing and improving diff handling in LLMs, aiding future development of diff formats and code editing models."}}
{"id": "2510.12546", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12546", "abs": "https://arxiv.org/abs/2510.12546", "authors": ["Hashini Gunatilake", "John Grundy", "Rashina Hoda", "Ingo Mueller"], "title": "The EmpathiSEr: Development and Validation of Software Engineering Oriented Empathy Scales", "comment": null, "summary": "Empathy plays a critical role in software engineering (SE), influencing\ncollaboration, communication, and user-centred design. Although SE research has\nincreasingly recognised empathy as a key human aspect, there remains no\nvalidated instrument specifically designed to measure it within the unique\nsocio-technical contexts of SE. Existing generic empathy scales, while\nwell-established in psychology and healthcare, often rely on language,\nscenarios, and assumptions that are not meaningful or interpretable for\nsoftware practitioners. These scales fail to account for the diverse,\nrole-specific, and domain-bound expressions of empathy in SE, such as\nunderstanding a non-technical user's frustrations or another practitioner's\ntechnical constraints, which differ substantially from empathy in clinical or\neveryday contexts. To address this gap, we developed and validated two\ndomain-specific empathy scales: EmpathiSEr-P, assessing empathy among\npractitioners, and EmpathiSEr-U, capturing practitioner empathy towards users.\nGrounded in a practitioner-informed conceptual framework, the scales encompass\nthree dimensions of empathy: cognitive empathy, affective empathy, and empathic\nresponses. We followed a rigorous, multi-phase methodology, including expert\nevaluation, cognitive interviews, and two practitioner surveys. The resulting\ninstruments represent the first psychometrically validated empathy scales\ntailored to SE, offering researchers and practitioners a tool for assessing\nempathy and designing empathy-enhancing interventions in software teams and\nuser interactions.", "AI": {"tldr": "Developed and validated two domain-specific empathy scales for software engineering: EmpathiSEr-P (practitioner empathy) and EmpathiSEr-U (practitioner empathy towards users), addressing the lack of validated instruments for measuring empathy in SE contexts.", "motivation": "Existing generic empathy scales from psychology and healthcare are not meaningful for software practitioners as they don't account for role-specific, domain-bound expressions of empathy in SE contexts like understanding technical constraints or user frustrations.", "method": "Rigorous multi-phase methodology including expert evaluation, cognitive interviews, and two practitioner surveys to develop scales covering three empathy dimensions: cognitive empathy, affective empathy, and empathic responses.", "result": "Created the first psychometrically validated empathy scales specifically tailored to software engineering, providing instruments to assess empathy in software teams and user interactions.", "conclusion": "The EmpathiSEr scales fill a critical gap by offering validated tools for researchers and practitioners to measure empathy and design empathy-enhancing interventions in software engineering contexts."}}
{"id": "2510.12566", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12566", "abs": "https://arxiv.org/abs/2510.12566", "authors": ["Maja H. Kirkeby", "Timmie Lagermann"], "title": "Evaluating End-User Device Energy Models in Sustainability Reporting of Browser-Based Web Services", "comment": null, "summary": "Sustainability reporting in web-based services increasingly relies on\nsimplified energy and carbon models such as the Danish Agency of Digital\nGovernment's Digst framework and the United Kingdom-based DIMPACT model.\nAlthough these models are widely adopted, their accuracy and precision remain\nunderexplored. This paper presents an empirical study evaluating how well such\nmodels reflect actual energy consumption during realistic user interactions\nwith common website categories. Energy use was measured across shopping,\nbooking, navigation, and news services using predefined user flows executed on\nfour laptop platforms. The results show that the commonly applied\nconstant-power approximation (P * t) can diverge substantially from measured\nenergy, depending on website category, device type, and task characteristics.\nThe findings demonstrate that model deviations are systematic rather than\nrandom and highlight the need for category-aware and device-reflective power\nparameters in reproducible sustainability reporting frameworks.", "AI": {"tldr": "Empirical evaluation shows that simplified energy models for web sustainability reporting (like Digst and DIMPACT) have systematic deviations from actual energy consumption, varying by website category, device type, and task characteristics.", "motivation": "To evaluate the accuracy and precision of widely adopted simplified energy and carbon models (Digst framework and DIMPACT model) for web-based services sustainability reporting, as their reliability remains underexplored.", "method": "Conducted empirical study measuring actual energy consumption during realistic user interactions with shopping, booking, navigation, and news websites using predefined user flows executed on four laptop platforms.", "result": "The constant-power approximation (P * t) commonly used in models diverges substantially from measured energy, with deviations being systematic rather than random, varying by website category, device type, and task characteristics.", "conclusion": "There is a need for category-aware and device-reflective power parameters in reproducible sustainability reporting frameworks to improve accuracy of energy consumption estimates."}}
{"id": "2510.12616", "categories": ["cs.SE", "cs.MA"], "pdf": "https://arxiv.org/pdf/2510.12616", "abs": "https://arxiv.org/abs/2510.12616", "authors": ["Muhammad Ashfaq", "Ahmed R. Sadik", "Teerath Das", "Muhammad Waseem", "Niko Makitalo", "Tommi Mikkonen"], "title": "Runtime Composition in Dynamic System of Systems: A Systematic Review of Challenges, Solutions, Tools, and Evaluation Methods", "comment": null, "summary": "Context: Modern Systems of Systems (SoSs) increasingly operate in dynamic\nenvironments (e.g., smart cities, autonomous vehicles) where runtime\ncomposition -- the on-the-fly discovery, integration, and coordination of\nconstituent systems (CSs)--is crucial for adaptability. Despite growing\ninterest, the literature lacks a cohesive synthesis of runtime composition in\ndynamic SoSs. Objective: This study synthesizes research on runtime composition\nin dynamic SoSs and identifies core challenges, solution strategies, supporting\ntools, and evaluation methods. Methods: We conducted a Systematic Literature\nReview (SLR), screening 1,774 studies published between 2019 and 2024 and\nselecting 80 primary studies for thematic analysis (TA). Results: Challenges\nfall into four categories: modeling and analysis, resilient operations, system\norchestration, and heterogeneity of CSs. Solutions span seven areas:\nco-simulation and digital twins, semantic ontologies, integration frameworks,\nadaptive architectures, middleware, formal methods, and AI-driven resilience.\nService-oriented frameworks for composition and integration dominate tooling,\nwhile simulation platforms support evaluation. Interoperability across tools,\nlimited cross-toolchain workflows, and the absence of standardized benchmarks\nremain key gaps. Evaluation approaches include simulation-based,\nimplementation-driven, and human-centered studies, which have been applied in\ndomains such as smart cities, healthcare, defense, and industrial automation.\nConclusions: The synthesis reveals tensions, including autonomy versus\ncoordination, the modeling-reality gap, and socio-technical integration. It\ncalls for standardized evaluation metrics, scalable decentralized\narchitectures, and cross-domain frameworks. The analysis aims to guide\nresearchers and practitioners in developing and implementing dynamically\ncomposable SoSs.", "AI": {"tldr": "This systematic literature review synthesizes research on runtime composition in dynamic Systems of Systems (SoSs), identifying key challenges, solution strategies, tools, and evaluation methods through analysis of 80 primary studies.", "motivation": "Modern SoSs operate in dynamic environments where runtime composition is crucial for adaptability, but the literature lacks cohesive synthesis of this topic.", "method": "Conducted a Systematic Literature Review (SLR) screening 1,774 studies from 2019-2024 and selecting 80 primary studies for thematic analysis.", "result": "Identified four challenge categories (modeling/analysis, resilient operations, system orchestration, CS heterogeneity) and seven solution areas. Service-oriented frameworks dominate tools, while simulation platforms support evaluation. Key gaps include interoperability issues and lack of standardized benchmarks.", "conclusion": "Reveals tensions between autonomy vs coordination and modeling-reality gap. Calls for standardized metrics, scalable decentralized architectures, and cross-domain frameworks to guide development of dynamically composable SoSs."}}
{"id": "2510.12702", "categories": ["cs.SE", "cs.AI", "cs.PL"], "pdf": "https://arxiv.org/pdf/2510.12702", "abs": "https://arxiv.org/abs/2510.12702", "authors": ["Cedric Richter", "Heike Wehrheim"], "title": "Beyond Postconditions: Can Large Language Models infer Formal Contracts for Automatic Software Verification?", "comment": "under submission", "summary": "Automatic software verifiers have become increasingly effective at the task\nof checking software against (formal) specifications. Yet, their adoption in\npractice has been hampered by the lack of such specifications in real world\ncode. Large Language Models (LLMs) have shown promise in inferring formal\npostconditions from natural language hints embedded in code such as function\nnames, comments or documentation. Using the generated postconditions as\nspecifications in a subsequent verification, however, often leads verifiers to\nsuggest invalid inputs, hinting at potential issues that ultimately turn out to\nbe false alarms.\n  To address this, we revisit the problem of specification inference from\nnatural language in the context of automatic software verification. In the\nprocess, we introduce NL2Contract, the task of employing LLMs to translate\ninformal natural language into formal functional contracts, consisting of\npostconditions as well as preconditions. We introduce metrics to validate and\ncompare different NL2Contract approaches, using soundness, bug discriminative\npower of the generated contracts and their usability in the context of\nautomatic software verification as key metrics. We evaluate NL2Contract with\ndifferent LLMs and compare it to the task of postcondition generation\nnl2postcond. Our evaluation shows that (1) LLMs are generally effective at\ngenerating functional contracts sound for all possible inputs, (2) the\ngenerated contracts are sufficiently expressive for discriminating buggy from\ncorrect behavior, and (3) verifiers supplied with LLM inferred functional\ncontracts produce fewer false alarms than when provided with postconditions\nalone. Further investigations show that LLM inferred preconditions generally\nalign well with developers intentions which allows us to use automatic software\nverifiers to catch real-world bugs.", "AI": {"tldr": "LLMs can effectively generate formal functional contracts (preconditions and postconditions) from natural language hints in code, improving software verification by reducing false alarms compared to postcondition-only generation.", "motivation": "Address the gap in automatic software verification adoption due to lack of formal specifications in real-world code, and reduce false alarms that occur when using LLM-generated postconditions alone.", "method": "Introduce NL2Contract task using LLMs to translate natural language into formal functional contracts (preconditions and postconditions), with evaluation metrics for soundness, bug discriminative power, and usability in verification.", "result": "LLMs effectively generate sound functional contracts that discriminate buggy from correct behavior, and verifiers with these contracts produce fewer false alarms than with postconditions alone. LLM-inferred preconditions align well with developer intentions.", "conclusion": "NL2Contract enables effective use of automatic software verifiers to catch real-world bugs by generating comprehensive functional contracts from natural language, overcoming limitations of postcondition-only approaches."}}
