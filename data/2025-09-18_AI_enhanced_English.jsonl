{"id": "2509.13436", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13436", "abs": "https://arxiv.org/abs/2509.13436", "authors": ["Evan Eisinger", "Michael A. Heroux"], "title": "Is Research Software Science a Metascience?", "comment": "5 pages", "summary": "As research increasingly relies on computational methods, the reliability of\nscientific results depends on the quality, reproducibility, and transparency of\nresearch software. Ensuring these qualities is critical for scientific\nintegrity and discovery. This paper asks whether Research Software Science\n(RSS)--the empirical study of how research software is developed and\nused--should be considered a form of metascience, the science of science.\nClassification matters because it could affect recognition, funding, and\nintegration of RSS into research improvement. We define metascience and RSS,\ncompare their principles and objectives, and examine their overlaps. Arguments\nfor classification highlight shared commitments to reproducibility,\ntransparency, and empirical study of research processes. Arguments against\nportraying RSS as a specialized domain focused on a tool rather than the\nbroader scientific enterprise. Our analysis finds RSS advances core goals of\nmetascience, especially in computational reproducibility, and bridges\ntechnical, social, and cognitive aspects of research. Its classification\ndepends on whether one adopts a broad definition of metascience--any empirical\neffort to improve science--or a narrow one focused on systemic and\nepistemological structures. We argue RSS is best understood as a distinct\ninterdisciplinary domain that aligns with, and in some definitions fits within,\nmetascience. Recognizing it as such can strengthen its role in improving\nreliability, justify funding, and elevate software development in research\ninstitutions. Regardless of classification, applying scientific rigor to\nresearch software ensures the tools of discovery meet the standards of the\ndiscoveries themselves.", "AI": {"tldr": "This paper examines whether Research Software Science (RSS) should be classified as metascience, analyzing their shared principles and arguing that RSS aligns with metascience goals in improving scientific reliability through empirical study of research software development.", "motivation": "As computational methods become essential in research, ensuring software quality, reproducibility, and transparency is critical for scientific integrity. The paper seeks to determine if RSS should be recognized as metascience to enhance its recognition, funding, and integration into research improvement efforts.", "method": "The authors define metascience and RSS, compare their principles and objectives, examine overlaps between the fields, and analyze arguments for and against classifying RSS as metascience. They consider both broad and narrow definitions of metascience.", "result": "The analysis finds that RSS advances core metascience goals, particularly in computational reproducibility, and bridges technical, social, and cognitive aspects of research. RSS can be viewed as either a distinct interdisciplinary domain or as fitting within a broad definition of metascience.", "conclusion": "RSS is best understood as a distinct interdisciplinary domain that aligns with metascience. Recognizing this classification can strengthen RSS's role in improving research reliability, justify funding, and elevate software development in research institutions, ensuring research tools meet scientific standards."}}
{"id": "2509.13471", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.13471", "abs": "https://arxiv.org/abs/2509.13471", "authors": ["Sina Gogani-Khiabani", "Ashutosh Trivedi", "Diptikalyan Saha", "Saeid Tizpaz-Niari"], "title": "An LLM Agentic Approach for Legal-Critical Software: A Case Study for Tax Prep Software", "comment": "To appear at ICSE 26. 12 pages", "summary": "Large language models (LLMs) show promise for translating natural-language\nstatutes into executable logic, but reliability in legally critical settings\nremains challenging due to ambiguity and hallucinations. We present an agentic\napproach for developing legal-critical software, using U.S. federal tax\npreparation as a case study. The key challenge is test-case generation under\nthe oracle problem, where correct outputs require interpreting law. Building on\nmetamorphic testing, we introduce higher-order metamorphic relations that\ncompare system outputs across structured shifts among similar individuals.\nBecause authoring such relations is tedious and error-prone, we use an\nLLM-driven, role-based framework to automate test generation and code\nsynthesis. We implement a multi-agent system that translates tax code into\nexecutable software and incorporates a metamorphic-testing agent that searches\nfor counterexamples. In experiments, our framework using a smaller model\n(GPT-4o-mini) achieves a worst-case pass rate of 45%, outperforming frontier\nmodels (GPT-4o and Claude 3.5, 9-15%) on complex tax-code tasks. These results\nsupport agentic LLM methodologies as a path to robust, trustworthy\nlegal-critical software from natural-language specifications.", "AI": {"tldr": "Agentic LLM framework for legal-critical software development using metamorphic testing, achieving 45% pass rate on complex tax code tasks and outperforming larger models.", "motivation": "LLMs show promise for translating legal statutes to executable logic but face reliability challenges due to ambiguity and hallucinations in legally critical settings.", "method": "Multi-agent system with higher-order metamorphic relations that compare outputs across structured shifts among similar individuals, using LLM-driven role-based framework for automated test generation and code synthesis.", "result": "Framework using GPT-4o-mini achieved 45% worst-case pass rate, significantly outperforming GPT-4o and Claude 3.5 (9-15%) on complex tax-code tasks.", "conclusion": "Agentic LLM methodologies provide a path to robust, trustworthy legal-critical software from natural-language specifications."}}
{"id": "2509.13487", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.13487", "abs": "https://arxiv.org/abs/2509.13487", "authors": ["Abubakari Alidu", "Michele Ciavotta", "Flavio DePaoli"], "title": "Prompt2DAG: A Modular Methodology for LLM-Based Data Enrichment Pipeline Generation", "comment": null, "summary": "Developing reliable data enrichment pipelines demands significant engineering\nexpertise. We present Prompt2DAG, a methodology that transforms natural\nlanguage descriptions into executable Apache Airflow DAGs. We evaluate four\ngeneration approaches -- Direct, LLM-only, Hybrid, and Template-based -- across\n260 experiments using thirteen LLMs and five case studies to identify optimal\nstrategies for production-grade automation. Performance is measured using a\npenalized scoring framework that combines reliability with code quality (SAT),\nstructural integrity (DST), and executability (PCT). The Hybrid approach\nemerges as the optimal generative method, achieving a 78.5% success rate with\nrobust quality scores (SAT: 6.79, DST: 7.67, PCT: 7.76). This significantly\noutperforms the LLM-only (66.2% success) and Direct (29.2% success) methods.\nOur findings show that reliability, not intrinsic code quality, is the primary\ndifferentiator. Cost-effectiveness analysis reveals the Hybrid method is over\ntwice as efficient as Direct prompting per successful DAG. We conclude that a\nstructured, hybrid approach is essential for balancing flexibility and\nreliability in automated workflow generation, offering a viable path to\ndemocratize data pipeline development.", "AI": {"tldr": "Prompt2DAG transforms natural language descriptions into executable Apache Airflow DAGs using four generation approaches, with Hybrid method achieving 78.5% success rate and outperforming other methods.", "motivation": "Developing reliable data enrichment pipelines requires significant engineering expertise, so the paper aims to democratize data pipeline development through automated workflow generation.", "method": "Evaluated four generation approaches (Direct, LLM-only, Hybrid, Template-based) across 260 experiments using thirteen LLMs and five case studies, with performance measured using penalized scoring framework combining reliability, code quality, structural integrity, and executability.", "result": "Hybrid approach emerged as optimal with 78.5% success rate and robust quality scores (SAT: 6.79, DST: 7.67, PCT: 7.76), significantly outperforming LLM-only (66.2%) and Direct (29.2%) methods. Reliability was found to be the primary differentiator, and Hybrid method is over twice as efficient as Direct prompting per successful DAG.", "conclusion": "A structured, hybrid approach is essential for balancing flexibility and reliability in automated workflow generation, offering a viable path to democratize data pipeline development."}}
{"id": "2509.13535", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13535", "abs": "https://arxiv.org/abs/2509.13535", "authors": ["S M Farah Al Fahim", "Md Nakhla Rafi", "Zeyang Ma", "Dong Jae Kim", "Tse-Hsun", "Chen"], "title": "Crash Report Enhancement with Large Language Models: An Empirical Study", "comment": null, "summary": "Crash reports are central to software maintenance, yet many lack the\ndiagnostic detail developers need to debug efficiently. We examine whether\nlarge language models can enhance crash reports by adding fault locations,\nroot-cause explanations, and repair suggestions. We study two enhancement\nstrategies: Direct-LLM, a single-shot approach that uses stack-trace context,\nand Agentic-LLM, an iterative approach that explores the repository for\nadditional evidence. On a dataset of 492 real-world crash reports, LLM-enhanced\nreports improve Top-1 problem-localization accuracy from 10.6% (original\nreports) to 40.2-43.1%, and produce suggested fixes that closely resemble\ndeveloper patches (CodeBLEU around 56-57%). Both our manual evaluations and\nLLM-as-a-judge assessment show that Agentic-LLM delivers stronger root-cause\nexplanations and more actionable repair guidance. A user study with 16\nparticipants further confirms that enhanced reports make crashes easier to\nunderstand and resolve, with the largest improvement in repair guidance. These\nresults indicate that supplying LLMs with stack traces and repository code\nyields enhanced crash reports that are substantially more useful for debugging.", "AI": {"tldr": "LLMs can significantly enhance crash reports by adding fault locations, explanations, and repair suggestions, improving localization accuracy from 10.6% to over 40% and producing fixes similar to developer patches.", "motivation": "Crash reports often lack diagnostic details needed for efficient debugging, creating a need for automated enhancement tools to help developers debug more effectively.", "method": "Two strategies: Direct-LLM (single-shot using stack-trace context) and Agentic-LLM (iterative approach exploring repository for additional evidence), tested on 492 real-world crash reports.", "result": "Improved Top-1 problem-localization accuracy from 10.6% to 40.2-43.1%, CodeBLEU scores around 56-57% for fix suggestions, with Agentic-LLM providing stronger explanations and more actionable guidance.", "conclusion": "LLMs with stack traces and repository code can create substantially more useful crash reports for debugging, as confirmed by both automated metrics and user studies."}}
{"id": "2509.13650", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.13650", "abs": "https://arxiv.org/abs/2509.13650", "authors": ["Amena Amro", "Manar H. Alalfi"], "title": "GitHub's Copilot Code Review: Can AI Spot Security Flaws Before You Commit?", "comment": null, "summary": "As software development practices increasingly adopt AI-powered tools,\nensuring that such tools can support secure coding has become critical. This\nstudy evaluates the effectiveness of GitHub Copilot's recently introduced code\nreview feature in detecting security vulnerabilities. Using a curated set of\nlabeled vulnerable code samples drawn from diverse open-source projects\nspanning multiple programming languages and application domains, we\nsystematically assessed Copilot's ability to identify and provide feedback on\ncommon security flaws. Contrary to expectations, our results reveal that\nCopilot's code review frequently fails to detect critical vulnerabilities such\nas SQL injection, cross-site scripting (XSS), and insecure deserialization.\nInstead, its feedback primarily addresses low-severity issues, such as coding\nstyle and typographical errors. These findings expose a significant gap between\nthe perceived capabilities of AI-assisted code review and its actual\neffectiveness in supporting secure development practices. Our results highlight\nthe continued necessity of dedicated security tools and manual code audits to\nensure robust software security.", "AI": {"tldr": "GitHub Copilot's code review feature performs poorly at detecting critical security vulnerabilities like SQL injection and XSS, instead focusing on low-severity style issues, revealing a significant gap in AI-assisted secure coding support.", "motivation": "As AI tools become integral to software development, understanding their effectiveness in supporting secure coding practices is crucial for software security.", "method": "Used a curated set of labeled vulnerable code samples from diverse open-source projects across multiple programming languages to systematically assess Copilot's vulnerability detection capabilities.", "result": "Copilot frequently failed to detect critical vulnerabilities (SQL injection, XSS, insecure deserialization) and primarily provided feedback on low-severity issues like coding style and typographical errors.", "conclusion": "There's a significant gap between perceived and actual capabilities of AI-assisted code review for security, highlighting the continued need for dedicated security tools and manual code audits."}}
{"id": "2509.13656", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13656", "abs": "https://arxiv.org/abs/2509.13656", "authors": ["Yingao Elaine Yao", "Vedant Nimje", "Varun Viswanath", "Saikat Dutta"], "title": "A Regression Testing Framework with Automated Assertion Generation for Machine Learning Notebooks", "comment": "22 pages, 2 figures, 6 tables", "summary": "Notebooks have become the de-facto choice for data scientists and machine\nlearning engineers for prototyping and experimenting with machine learning (ML)\npipelines. Notebooks provide an interactive interface for code, data, and\nvisualization. However, notebooks provide very limited support for testing.\nThus, during continuous development, many subtle bugs that do not lead to\ncrashes often go unnoticed and cause silent errors that manifest as performance\nregressions.\n  To address this, we introduce NBTest - the first regression testing framework\nthat allows developers to write cell-level assertions in notebooks and run such\nnotebooks in pytest or in continuous integration (CI) pipelines. NBTest offers\na library of assertion APIs, and a JupyterLab plugin that enables executing\nassertions. We also develop the first automated approach for generating\ncell-level assertions for key components in ML notebooks, such as data\nprocessing, model building, and model evaluation. NBTest aims to improve the\nreliability and maintainability of ML notebooks without adding developer\nburden.\n  We evaluate NBTest on 592 Kaggle notebooks. Overall, NBTest generates 21163\nassertions (35.75 on average per notebook). The generated assertions obtain a\nmutation score of 0.57 in killing ML-specific mutations. NBTest can catch\nregression bugs in previous versions of the Kaggle notebooks using assertions\ngenerated for the latest versions. Because ML pipelines involve non\ndeterministic computations, the assertions can be flaky. Hence, we also show\nhow NBTest leverages statistical techniques to minimize flakiness while\nretaining high fault-detection effectiveness. NBTest has been adopted in the CI\nof a popular ML library. Further, we perform a user study with 17 participants\nthat shows that notebook users find NBTest intuitive (Rating 4.3/5) and useful\nin writing assertions and testing notebooks (Rating 4.24/5).", "AI": {"tldr": "NBTest is a regression testing framework for Jupyter notebooks that enables cell-level assertions and automated assertion generation for ML pipelines, improving reliability without burdening developers.", "motivation": "Notebooks are widely used for ML development but provide limited testing support, leading to subtle bugs and performance regressions that go unnoticed during continuous development.", "method": "Developed NBTest framework with assertion APIs, JupyterLab plugin for execution, and automated approach for generating cell-level assertions for key ML components (data processing, model building, evaluation). Uses statistical techniques to handle non-deterministic computations.", "result": "Evaluated on 592 Kaggle notebooks, generating 21,163 assertions (avg 35.75 per notebook) with mutation score of 0.57. Successfully catches regression bugs and has been adopted in CI of a popular ML library. User study shows high usability ratings (4.3/5 intuitive, 4.24/5 useful).", "conclusion": "NBTest effectively addresses the testing gap in ML notebooks by providing automated assertion generation and execution capabilities that improve reliability while minimizing developer burden and handling ML-specific challenges like non-determinism."}}
{"id": "2509.13680", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.13680", "abs": "https://arxiv.org/abs/2509.13680", "authors": ["Wei Ma", "Yixiao Yang", "Jingquan Ge", "Xiaofei Xie", "Lingxiao Jiang"], "title": "Prompt Stability in Code LLMs: Measuring Sensitivity across Emotion- and Personality-Driven Variations", "comment": null, "summary": "Code generation models are widely used in software development, yet their\nsensitivity to prompt phrasing remains under-examined. Identical requirements\nexpressed with different emotions or communication styles can yield divergent\noutputs, while most benchmarks emphasize only peak performance. We present\nPromptSE (Prompt Sensitivity Evaluation), a framework that creates semantically\nequivalent prompt variants with emotion and personality templates, and that\nevaluates stability using probability aware continuous scoring or using binary\npass rates when logits are unavailable. The results are aggregated into a\nproposed area under curve metric (AUC-E) for cross model comparison. Across 14\nmodels from three families (Llama, Qwen, and DeepSeek), our study shows that\nperformance and stability behave as largely decoupled optimization objectives,\nand it reveals architectural and scale related patterns that challenge common\nassumptions about model robustness. The framework supports rapid screening for\nclosed-source models as well as detailed stability analysis in research\nsettings. PromptSE enables practitioners to quantify performance stability\ntrade offs for deployment and model selection, positioning prompt stability as\na complementary evaluation dimension alongside performance and fairness, and\ncontributing to more trustworthy AI-assisted software development tools.", "AI": {"tldr": "PromptSE is a framework that evaluates code generation models' sensitivity to prompt phrasing variations, revealing that performance and stability are largely decoupled objectives across 14 models from Llama, Qwen, and DeepSeek families.", "motivation": "Code generation models are widely used but their sensitivity to prompt phrasing variations (emotions, communication styles) remains under-examined, while benchmarks focus only on peak performance, creating a need for stability evaluation.", "method": "PromptSE creates semantically equivalent prompt variants using emotion and personality templates, evaluates stability with probability-aware continuous scoring or binary pass rates, and aggregates results into AUC-E metric for cross-model comparison.", "result": "The study shows performance and stability behave as decoupled optimization objectives, reveals architectural and scale-related patterns that challenge assumptions about model robustness, and enables rapid screening for closed-source models.", "conclusion": "PromptSE quantifies performance-stability trade-offs for deployment, positions prompt stability as a complementary evaluation dimension alongside performance and fairness, and contributes to more trustworthy AI-assisted software development tools."}}
{"id": "2509.13755", "categories": ["cs.SE", "cs.AI", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.13755", "abs": "https://arxiv.org/abs/2509.13755", "authors": ["Zhaoyang Chu", "Yao Wan", "Zhikun Zhang", "Di Wang", "Zhou Yang", "Hongyu Zhang", "Pan Zhou", "Xuanhua Shi", "Hai Jin", "David Lo"], "title": "Scrub It Out! Erasing Sensitive Memorization in Code Language Models via Machine Unlearning", "comment": "Accepted at the 48th IEEE/ACM International Conference on Software\n  Engineering (ICSE 2026)", "summary": "While Code Language Models (CLMs) have demonstrated superior performance in\nsoftware engineering tasks such as code generation and summarization, recent\nempirical studies reveal a critical privacy vulnerability: these models exhibit\nunintended memorization of sensitive training data, enabling verbatim\nreproduction of confidential information when specifically prompted. To address\nthis issue, several approaches, including training data de-duplication and\ndifferential privacy augmentation, have been proposed. However, these methods\nrequire full-model retraining for deployed CLMs, which incurs substantial\ncomputational costs. In this paper, we aim to answer the following research\nquestion: Can sensitive information memorized by CLMs be erased effectively and\nefficiently?\n  We conduct a pioneering investigation into erasing sensitive memorization in\nCLMs through machine unlearning - a post-hoc modification method that removes\nspecific information from trained models without requiring full retraining.\nSpecifically, we first quantify the memorization risks of sensitive data within\nCLM training datasets and curate a high-risk dataset of 50,000 sensitive\nmemorized samples as unlearning targets. We study two widely used gradient\nascent-based unlearning approaches: the vanilla and constraint-based methods,\nand introduce CodeEraser, an advanced variant that selectively unlearns\nsensitive memorized segments in code while preserving the structural integrity\nand functional correctness of the surrounding code. Extensive experiments on\nthree families of CLMs, i.e., CodeParrot, CodeGen-Mono, and Qwen2.5-Coder,\nvalidate the effectiveness and efficiency of CodeEraser in erasing targeted\nsensitive memorization while maintaining model utility.", "AI": {"tldr": "CodeEraser enables efficient erasure of sensitive memorized data from code language models using selective machine unlearning, eliminating the need for full retraining while preserving model utility.", "motivation": "CLMs unintentionally memorize sensitive training data, creating privacy risks. Existing solutions require costly full-model retraining, making them impractical for deployed models.", "method": "Developed CodeEraser - a gradient ascent-based unlearning approach that selectively removes sensitive memorized segments while preserving code structure and functionality. Curated 50,000 high-risk samples for targeted unlearning.", "result": "Extensive experiments on CodeParrot, CodeGen-Mono, and Qwen2.5-Coder show CodeEraser effectively erases targeted sensitive memorization while maintaining model performance and utility.", "conclusion": "Machine unlearning provides an efficient post-hoc solution for privacy protection in CLMs, enabling selective erasure of sensitive data without full retraining costs."}}
{"id": "2509.13758", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13758", "abs": "https://arxiv.org/abs/2509.13758", "authors": ["Kevin Halim", "Sin G. Teo", "Ruitao Feng", "Zhenpeng Chen", "Yang Gu", "Chong Wang", "Yang Liu"], "title": "A Study on Thinking Patterns of Large Reasoning Models in Code Generation", "comment": null, "summary": "Currently, many large language models (LLMs) are utilized for software\nengineering tasks such as code generation. The emergence of more advanced\nmodels known as large reasoning models (LRMs), such as OpenAI's o3, DeepSeek\nR1, and Qwen3. They have demonstrated the capability of performing multi-step\nreasoning. Despite the advancement in LRMs, little attention has been paid to\nsystematically analyzing the reasoning patterns these models exhibit and how\nsuch patterns influence the generated code. This paper presents a comprehensive\nstudy aimed at investigating and uncovering the reasoning behavior of LRMs\nduring code generation. We prompted several state-of-the-art LRMs of varying\nsizes with code generation tasks and applied open coding to manually annotate\nthe reasoning traces. From this analysis, we derive a taxonomy of LRM reasoning\nbehaviors, encompassing 15 reasoning actions across four phases.\n  Our empirical study based on the taxonomy reveals a series of findings.\nFirst, we identify common reasoning patterns, showing that LRMs generally\nfollow a human-like coding workflow, with more complex tasks eliciting\nadditional actions such as scaffolding, flaw detection, and style checks.\nSecond, we compare reasoning across models, finding that Qwen3 exhibits\niterative reasoning while DeepSeek-R1-7B follows a more linear, waterfall-like\napproach. Third, we analyze the relationship between reasoning and code\ncorrectness, showing that actions such as unit test creation and scaffold\ngeneration strongly support functional outcomes, with LRMs adapting strategies\nbased on task context. Finally, we evaluate lightweight prompting strategies\ninformed by these findings, demonstrating the potential of context- and\nreasoning-oriented prompts to improve LRM-generated code. Our results offer\ninsights and practical implications for advancing automatic code generation.", "AI": {"tldr": "This paper analyzes reasoning patterns of large reasoning models (LRMs) during code generation, identifying 15 reasoning actions across 4 phases and showing how different reasoning strategies affect code quality.", "motivation": "Despite advancements in large reasoning models (LRMs) for code generation, there is limited systematic analysis of their reasoning patterns and how these patterns influence generated code quality.", "method": "The researchers prompted state-of-the-art LRMs with code generation tasks, manually annotated reasoning traces using open coding, and derived a taxonomy of 15 reasoning actions across four phases. They also evaluated lightweight prompting strategies.", "result": "Key findings: LRMs follow human-like coding workflows; Qwen3 uses iterative reasoning while DeepSeek-R1-7B uses linear approaches; unit test creation and scaffold generation strongly support code correctness; context-aware prompts can improve code quality.", "conclusion": "The study provides insights into LRM reasoning behaviors and demonstrates practical implications for improving automatic code generation through better understanding of reasoning patterns and targeted prompting strategies."}}
{"id": "2509.13782", "categories": ["cs.SE", "cs.AI", "cs.MA", "D.2.2; I.2.1"], "pdf": "https://arxiv.org/pdf/2509.13782", "abs": "https://arxiv.org/abs/2509.13782", "authors": ["Yu Ge", "Linna Xie", "Zhong Li", "Yu Pei", "Tian Zhang"], "title": "Who is Introducing the Failure? Automatically Attributing Failures of Multi-Agent Systems via Spectrum Analysis", "comment": "20 pages, 6 figures", "summary": "Large Language Model Powered Multi-Agent Systems (MASs) are increasingly\nemployed to automate complex real-world problems, such as programming and\nscientific discovery. Despite their promising, MASs are not without their\nflaws. However, failure attribution in MASs - pinpointing the specific agent\nactions responsible for failures - remains underexplored and labor-intensive,\nposing significant challenges for debugging and system improvement. To bridge\nthis gap, we propose FAMAS, the first spectrum-based failure attribution\napproach for MASs, which operates through systematic trajectory replay and\nabstraction, followed by spectrum analysis.The core idea of FAMAS is to\nestimate, from variations across repeated MAS executions, the likelihood that\neach agent action is responsible for the failure. In particular, we propose a\nnovel suspiciousness formula tailored to MASs, which integrates two key factor\ngroups, namely the agent behavior group and the action behavior group, to\naccount for the agent activation patterns and the action activation patterns\nwithin the execution trajectories of MASs. Through expensive evaluations\nagainst 12 baselines on the Who and When benchmark, FAMAS demonstrates superior\nperformance by outperforming all the methods in comparison.", "AI": {"tldr": "FAMAS is a spectrum-based failure attribution approach for Multi-Agent Systems that identifies which agent actions cause failures through systematic trajectory replay and analysis.", "motivation": "Failure attribution in Multi-Agent Systems is challenging and labor-intensive, making debugging difficult despite the increasing use of LLM-powered MASs for complex problems.", "method": "Uses systematic trajectory replay and abstraction followed by spectrum analysis with a novel suspiciousness formula that integrates agent behavior and action behavior patterns.", "result": "Outperformed all 12 baseline methods on the Who and When benchmark through extensive evaluations.", "conclusion": "FAMAS provides an effective automated approach for failure attribution in MASs, addressing a critical gap in debugging complex multi-agent systems."}}
{"id": "2509.13852", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13852", "abs": "https://arxiv.org/abs/2509.13852", "authors": ["Yulun Wu", "Guangba Yu", "Zhihan Jiang", "Yichen Li", "Michael R. Lyu"], "title": "Trace Sampling 2.0: Code Knowledge Enhanced Span-level Sampling for Distributed Tracing", "comment": null, "summary": "Distributed tracing is an essential diagnostic tool in microservice systems,\nbut the sheer volume of traces places a significant burden on backend storage.\nA common approach to mitigating this issue is trace sampling, which selectively\nretains traces based on specific criteria, often preserving only anomalous\nones. However, this method frequently discards valuable information, including\nnormal traces that are essential for comparative analysis. To address this\nlimitation, we introduce Trace Sampling 2.0, which operates at the span level\nwhile maintaining trace structure consistency. This approach allows for the\nretention of all traces while significantly reducing storage overhead. Based on\nthis concept, we design and implement Autoscope, a span-level sampling method\nthat leverages static analysis to extract execution logic, ensuring that\ncritical spans are preserved without compromising structural integrity. We\nevaluated Autoscope on two open-source microservices. Our results show that it\nreduces trace size by 81.2% while maintaining 98.1% faulty span coverage,\noutperforming existing trace-level sampling methods. Furthermore, we\ndemonstrate its effectiveness in root cause analysis, achieving an average\nimprovement of 8.3%. These findings indicate that Autoscope can significantly\nenhance observability and storage efficiency in microservices, offering a\nrobust solution for performance monitoring.", "AI": {"tldr": "Autoscope introduces span-level sampling that reduces trace storage by 81.2% while preserving 98.1% of faulty spans, outperforming traditional trace-level sampling methods.", "motivation": "Traditional trace sampling methods discard valuable normal traces needed for comparative analysis while trying to reduce storage burden from massive trace volumes in microservices.", "method": "Trace Sampling 2.0 operates at span level while maintaining trace structure consistency, using static analysis to extract execution logic and preserve critical spans without compromising structural integrity.", "result": "81.2% reduction in trace size with 98.1% faulty span coverage, and 8.3% average improvement in root cause analysis effectiveness compared to existing methods.", "conclusion": "Autoscope significantly enhances observability and storage efficiency in microservices, providing a robust solution for performance monitoring through span-level sampling."}}
{"id": "2509.13868", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13868", "abs": "https://arxiv.org/abs/2509.13868", "authors": ["Manal Binkhonain", "Reem Alfayaz"], "title": "Are Prompts All You Need? Evaluating Prompt-Based Large Language Models (LLM)s for Software Requirements Classification", "comment": "33 pages, 12 figures", "summary": "Requirements classification assigns natural language requirements to\npredefined classes, such as functional and non functional. Accurate\nclassification reduces risk and improves software quality. Most existing models\nrely on supervised learning, which needs large labeled data that are costly,\nslow to create, and domain dependent; they also generalize poorly and often\nrequire retraining for each task. This study tests whether prompt based large\nlanguage models can reduce data needs. We benchmark several models and\nprompting styles (zero shot, few shot, persona, and chain of thought) across\nmultiple tasks on two English datasets, PROMISE and SecReq. For each task we\ncompare model prompt configurations and then compare the best LLM setups with a\nstrong fine tuned transformer baseline. Results show that prompt based LLMs,\nespecially with few shot prompts, can match or exceed the baseline. Adding a\npersona, or persona plus chain of thought, can yield further gains. We conclude\nthat prompt based LLMs are a practical and scalable option that reduces\ndependence on large annotations and can improve generalizability across tasks.", "AI": {"tldr": "Prompt-based LLMs with few-shot prompting can match or exceed fine-tuned transformers for requirements classification, reducing the need for large labeled datasets.", "motivation": "Traditional supervised learning for requirements classification requires costly labeled data, is domain-dependent, and generalizes poorly. This study explores whether prompt-based LLMs can reduce data dependency while maintaining performance.", "method": "Benchmarked several LLMs with different prompting styles (zero-shot, few-shot, persona, chain of thought) on two English datasets (PROMISE and SecReq), comparing against a strong fine-tuned transformer baseline.", "result": "Few-shot prompt-based LLMs matched or exceeded the baseline performance. Adding persona or persona plus chain of thought further improved results.", "conclusion": "Prompt-based LLMs offer a practical and scalable alternative that reduces dependence on large annotations and improves generalizability across tasks."}}
{"id": "2509.13896", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13896", "abs": "https://arxiv.org/abs/2509.13896", "authors": ["Shalini Chakraborty", "Lola Burgue\u00f1o", "Nathalie Moreno", "Javier Troya", "Paula Mu\u00f1oz"], "title": "Mind the Ethics! The Overlooked Ethical Dimensions of GenAI in Software Modeling Education", "comment": "8 pages, Educators Symposium at MODELS 2025", "summary": "Generative Artificial Intelligence (GenAI) is rapidly gaining momentum in\nsoftware modeling education, embraced by both students and educators. As GenAI\nassists with interpreting requirements, formalizing models, and translating\nstudents' mental models into structured notations, it increasingly shapes core\nlearning outcomes such as domain comprehension, diagrammatic thinking, and\nmodeling fluency without clear ethical oversight or pedagogical guidelines.\nYet, the ethical implications of this integration remain underexplored.\n  In this paper, we conduct a systematic literature review across six major\ndigital libraries in computer science (ACM Digital Library, IEEE Xplore,\nScopus, ScienceDirect, SpringerLink, and Web of Science). Our aim is to\nidentify studies discussing the ethical aspects of GenAI in software modeling\neducation, including responsibility, fairness, transparency, diversity, and\ninclusion among others.\n  Out of 1,386 unique papers initially retrieved, only three explicitly\naddressed ethical considerations. This scarcity highlights the critical absence\nof ethical discourse surrounding GenAI in modeling education and raises urgent\nquestions about the responsible integration of AI in modeling curricula, as\nwell as it evinces the pressing need for structured ethical frameworks in this\nemerging educational landscape. We examine these three studies and explore the\nemerging research opportunities as well as the challenges that have arisen in\nthis field.", "AI": {"tldr": "Systematic review finds only 3 out of 1,386 papers address ethical considerations of GenAI in software modeling education, revealing critical gap in ethical discourse and need for frameworks.", "motivation": "GenAI is rapidly being adopted in software modeling education without clear ethical oversight or pedagogical guidelines, shaping core learning outcomes while ethical implications remain underexplored.", "method": "Conducted systematic literature review across six major computer science digital libraries (ACM, IEEE, Scopus, ScienceDirect, SpringerLink, Web of Science) to identify studies discussing ethical aspects of GenAI in software modeling education.", "result": "Only 3 papers out of 1,386 unique papers explicitly addressed ethical considerations, highlighting a critical absence of ethical discourse in this field.", "conclusion": "Urgent need for structured ethical frameworks and responsible integration of AI in modeling curricula, with emerging research opportunities and challenges requiring immediate attention."}}
{"id": "2509.13941", "categories": ["cs.SE", "cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2509.13941", "abs": "https://arxiv.org/abs/2509.13941", "authors": ["Simiao Liu", "Fang Liu", "Liehao Li", "Xin Tan", "Yinghao Zhu", "Xiaoli Lian", "Li Zhang"], "title": "An Empirical Study on Failures in Automated Issue Solving", "comment": null, "summary": "Automated issue solving seeks to autonomously identify and repair defective\ncode snippets across an entire codebase. SWE-Bench has emerged as the most\nwidely adopted benchmark for evaluating progress in this area. While LLM-based\nagentic tools show great promise, they still fail on a substantial portion of\ntasks. Moreover, current evaluations primarily report aggregate issue-solving\nrates, which obscure the underlying causes of success and failure, making it\nchallenging to diagnose model weaknesses or guide targeted improvements. To\nbridge this gap, we first analyze the performance and efficiency of three SOTA\ntools, spanning both pipeline-based and agentic architectures, in automated\nissue solving tasks of SWE-Bench-Verified under varying task characteristics.\nFurthermore, to move from high-level performance metrics to underlying cause\nanalysis, we conducted a systematic manual analysis of 150 failed instances.\nFrom this analysis, we developed a comprehensive taxonomy of failure modes\ncomprising 3 primary phases, 9 main categories, and 25 fine-grained\nsubcategories. Then we systematically analyze the distribution of the\nidentified failure modes, the results reveal distinct failure fingerprints\nbetween the two architectural paradigms, with the majority of agentic failures\nstemming from flawed reasoning and cognitive deadlocks. Motivated by these\ninsights, we propose a collaborative Expert-Executor framework. It introduces a\nsupervisory Expert agent tasked with providing strategic oversight and\ncourse-correction for a primary Executor agent. This architecture is designed\nto correct flawed reasoning and break the cognitive deadlocks that frequently\nlead to failure. Experiments show that our framework solves 22.2% of previously\nintractable issues for a leading single agent. These findings pave the way for\nbuilding more robust agents through diagnostic evaluation and collaborative\ndesign.", "AI": {"tldr": "This paper analyzes failure modes in automated issue solving on SWE-Bench, develops a taxonomy of 25 failure subcategories, and proposes an Expert-Executor collaborative framework that solves 22.2% of previously intractable issues.", "motivation": "Current evaluations of automated issue solving tools primarily report aggregate success rates, which obscure the underlying causes of failure and make it difficult to diagnose model weaknesses or guide targeted improvements.", "method": "The authors first analyzed three state-of-the-art tools on SWE-Bench-Verified, conducted systematic manual analysis of 150 failed instances to develop a comprehensive failure taxonomy, and then proposed a collaborative Expert-Executor framework with supervisory oversight.", "result": "The analysis revealed distinct failure fingerprints between pipeline-based and agentic architectures, with agentic failures primarily stemming from flawed reasoning and cognitive deadlocks. The proposed Expert-Executor framework solved 22.2% of previously intractable issues.", "conclusion": "The findings demonstrate the value of diagnostic evaluation and collaborative agent design for building more robust automated issue solving systems, with the failure taxonomy providing guidance for targeted improvements."}}
{"id": "2509.13942", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.13942", "abs": "https://arxiv.org/abs/2509.13942", "authors": ["Duc Minh Ha", "Phu Trac Kien", "Tho Quan", "Anh Nguyen-Duc"], "title": "Evaluating Classical Software Process Models as Coordination Mechanisms for LLM-Based Software Generation", "comment": null, "summary": "[Background] Large Language Model (LLM)-based multi-agent systems (MAS) are\ntransforming software development by enabling autonomous collaboration.\nClassical software processes such asWaterfall, V-Model, and Agile offer\nstructured coordination patterns that can be repurposed to guide these agent\ninteractions. [Aims] This study explores how traditional software development\nprocesses can be adapted as coordination scaffolds for LLM based MAS and\nexamines their impact on code quality, cost, and productivity. [Method] We\nexecuted 11 diverse software projects under three process models and four GPT\nvariants, totaling 132 runs. Each output was evaluated using standardized\nmetrics for size (files, LOC), cost (execution time, token usage), and quality\n(code smells, AI- and human detected bugs). [Results] Both process model and\nLLM choice significantly affected system performance. Waterfall was most\nefficient, V-Model produced the most verbose code, and Agile achieved the\nhighest code quality, albeit at higher computational cost. [Conclusions]\nClassical software processes can be effectively instantiated in LLM-based MAS,\nbut each entails trade-offs across quality, cost, and adaptability. Process\nselection should reflect project goals, whether prioritizing efficiency,\nrobustness, or structured validation.", "AI": {"tldr": "Traditional software development processes (Waterfall, V-Model, Agile) can be adapted as coordination frameworks for LLM-based multi-agent systems, with each process offering different trade-offs in code quality, efficiency, and computational cost.", "motivation": "To explore how classical software development processes can be repurposed to guide autonomous collaboration in LLM-based multi-agent systems and examine their impact on development outcomes.", "method": "Executed 11 diverse software projects across three process models (Waterfall, V-Model, Agile) and four GPT variants, totaling 132 runs. Evaluated outputs using standardized metrics for size, cost, and quality including code smells and bug detection.", "result": "Both process model and LLM choice significantly affected performance. Waterfall was most efficient, V-Model produced the most verbose code, and Agile achieved the highest code quality but at higher computational cost.", "conclusion": "Classical software processes can be effectively implemented in LLM-based MAS, but each involves trade-offs across quality, cost, and adaptability. Process selection should align with project priorities such as efficiency, robustness, or structured validation."}}
{"id": "2509.14093", "categories": ["cs.SE", "cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2509.14093", "abs": "https://arxiv.org/abs/2509.14093", "authors": ["Kerui Huang", "Shuhan Liu", "Xing Hu", "Tongtong Xu", "Lingfeng Bao", "Xin Xia"], "title": "Reasoning Efficiently Through Adaptive Chain-of-Thought Compression: A Self-Optimizing Framework", "comment": null, "summary": "Chain-of-Thought (CoT) reasoning enhances Large Language Models (LLMs) by\nprompting intermediate steps, improving accuracy and robustness in arithmetic,\nlogic, and commonsense tasks. However, this benefit comes with high\ncomputational costs: longer outputs increase latency, memory usage, and\nKV-cache demands. These issues are especially critical in software engineering\ntasks where concise and deterministic outputs are required. To investigate\nthese trade-offs, we conduct an empirical study based on code generation\nbenchmarks. The results reveal that longer CoT does not always help. Excessive\nreasoning often causes truncation, accuracy drops, and latency up to five times\nhigher, with failed outputs consistently longer than successful ones. These\nfindings challenge the assumption that longer reasoning is inherently better\nand highlight the need for adaptive CoT control. Motivated by this, we propose\nSEER (Self-Enhancing Efficient Reasoning), an adaptive framework that\ncompresses CoT while preserving accuracy. SEER combines Best-of-N sampling with\ntask-aware adaptive filtering, dynamically adjusting thresholds based on\npre-inference outputs to reduce verbosity and computational overhead. We then\nevaluate SEER on three software engineering tasks and one math task. On\naverage, SEER shortens CoT by 42.1%, improves accuracy by reducing truncation,\nand eliminates most infinite loops. These results demonstrate SEER as a\npractical method to make CoT-enhanced LLMs more efficient and robust, even\nunder resource constraints.", "AI": {"tldr": "Chain-of-Thought reasoning improves LLM accuracy but increases computational costs. SEER framework adaptively compresses CoT reasoning to reduce verbosity by 42.1% while maintaining accuracy, making LLMs more efficient for software engineering tasks.", "motivation": "CoT reasoning enhances LLM performance but creates high computational costs (latency, memory, KV-cache) that are problematic for software engineering tasks requiring concise outputs. Longer reasoning doesn't always help and can cause truncation and accuracy drops.", "method": "SEER (Self-Enhancing Efficient Reasoning) framework combines Best-of-N sampling with task-aware adaptive filtering. It dynamically adjusts thresholds based on pre-inference outputs to compress CoT while preserving accuracy.", "result": "SEER shortens CoT by 42.1% on average, improves accuracy by reducing truncation, and eliminates most infinite loops. It maintains performance while significantly reducing computational overhead across software engineering and math tasks.", "conclusion": "Longer reasoning isn't inherently better. SEER provides a practical adaptive framework to make CoT-enhanced LLMs more efficient and robust under resource constraints, challenging the assumption that extended reasoning always improves performance."}}
