{"id": "2510.15004", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.15004", "abs": "https://arxiv.org/abs/2510.15004", "authors": ["Zhiming Zhang", "Qingfu Zhu", "Xianzhen Luo", "Yixuan Wang", "Bohan Li", "Wanxiang Che"], "title": "Automated Snippet-Alignment Data Augmentation for Code Translation", "comment": null, "summary": "Code translation aims to translate the code from its source language to the\ntarget language and is used in various software development scenarios. Recent\ndevelopments in Large Language Models (LLMs) have showcased their capabilities\nin code translation, and parallel corpora play a crucial role in training\nmodels for code translation. Parallel corpora can be categorized into\nprogram-alignment (PA) and snippet-alignment (SA) data. Although PA data has\ncomplete context and is suitable for semantic alignment learning, it may not\nprovide adequate fine-grained training signals due to its extended length,\nwhile the brevity of SA data enables more fine-grained alignment learning. Due\nto limited parallel corpora, researchers explore several augmentation methods\nfor code translation. Previous studies mainly focus on augmenting PA data. In\nthis paper, we propose a data augmentation method that leverages LLMs to\ngenerate SA data automatically. To fully leverage both PA data and SA data, we\nexplore a simple yet effective two-stage training strategy, which consistently\nenhances model performance compared to fine-tuning solely on PA data.\nExperiments on TransCoder-test demonstrate that our augmented SA data combined\nwith the two-stage training approach yields consistent improvements over the\nbaseline, achieving a maximum gain of 3.78% on pass@k.", "AI": {"tldr": "Proposes using LLMs to generate snippet-alignment data for code translation and a two-stage training strategy that combines both program-alignment and snippet-alignment data to improve model performance.", "motivation": "Parallel corpora are crucial for code translation but limited. Existing augmentation methods mainly focus on program-alignment data, while snippet-alignment data enables more fine-grained alignment learning but is scarce.", "method": "Leverages LLMs to automatically generate snippet-alignment data and proposes a two-stage training strategy that uses both program-alignment and generated snippet-alignment data.", "result": "Experiments on TransCoder-test show consistent improvements over baseline, achieving maximum gain of 3.78% on pass@k metric.", "conclusion": "The proposed data augmentation method and two-stage training strategy effectively enhance code translation performance by leveraging both types of parallel corpora."}}
{"id": "2510.15079", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15079", "abs": "https://arxiv.org/abs/2510.15079", "authors": ["Changshu Liu", "Yang Chen", "Reyhaneh Jabbarvand"], "title": "Assessing Coherency and Consistency of Code Execution Reasoning by Large Language Models", "comment": null, "summary": "This paper proposes CES, a task to evaluate the abilities of LLMs in\nsimulating program execution and using that reasoning in programming tasks.\nBesides measuring the correctness of variable predictions during execution\nsimulation, CES introduces the notion of coherence to determine whether the\nsimulation complies with commonsense execution logic, even if the predicted\nvalues along the simulations are incorrect. This enables CES to rule out\nsuspiciously correct output predictions due to reasoning shortcuts,\nhallucinations, or potential data leakage. CES also introduces a novel metric\nto measure reasoning consistency across tests with the same or different prime\npath coverage in a spectrum: strong, weak, and random. Evaluating 16 LLMs\n(including three reasoning LLMs) using CES indicates 81.42% coherent execution\nsimulation on HumanEval, 46.92% and 53.08% of which result in correct and\nincorrect output predictions. Frontier LLMs such as GPT-4 and DeepSeek-R1 have\nthe most incoherent execution reasoning, mostly due to natural language\nshortcuts. Despite relatively coherent execution simulation, LLMs' reasoning\nperformance across different tests is inconsistent, mostly random (48.87%) or\nweak (45.37%), potentially explaining their weakness in programming tasks that\nrequire path-sensitive program analysis to succeed. We also compare CES with\nbug prediction/localization/repair, which intuitively requires control- and\ndata-flow awareness. We observe that LLMs barely incorporate execution\nreasoning into their analysis for bug-related tasks, and their success is\nprimarily due to inherent abilities in pattern matching or natural language\nshortcuts, if not data leakage. Without reasoning, there is a threat to the\ngeneralizability of LLMs in dealing with unseen bugs or patterns in different\ncontexts. CES can be used to vet the suspicious success of LLMs in these tasks\nsystematically.", "AI": {"tldr": "CES is a task to evaluate LLMs' abilities in simulating program execution and using that reasoning in programming tasks, introducing coherence metrics to detect reasoning shortcuts and hallucinations.", "motivation": "To evaluate whether LLMs truly understand program execution or rely on shortcuts, and to systematically assess their reasoning consistency across different test cases.", "method": "Proposes CES task with coherence metrics and reasoning consistency spectrum (strong, weak, random), evaluating 16 LLMs including reasoning models on HumanEval dataset.", "result": "81.42% coherent execution simulation on HumanEval, but only 46.92% correct predictions; frontier LLMs show most incoherent reasoning due to natural language shortcuts; reasoning consistency is mostly random (48.87%) or weak (45.37%).", "conclusion": "LLMs barely incorporate execution reasoning into bug-related tasks, relying on pattern matching or shortcuts; CES can systematically vet suspicious success and reveals threats to generalizability in dealing with unseen bugs."}}
{"id": "2510.15408", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15408", "abs": "https://arxiv.org/abs/2510.15408", "authors": ["Mohit", "Kuljit Kaur Chahal"], "title": "Community Engagement and the Lifespan of Open-Source Software Projects", "comment": null, "summary": "Open-source software (OSS) projects depend on community engagement (CE) for\nlongevity. However, CE's quantifiable impact on project dynamics and lifespan\nis underexplored. Objectives: This study defines CE in OSS, identifies key\nmetrics, and evaluates their influence on project dynamics (releases, commits,\nbranches) and lifespan. Methods: We analyzed 33,946 GitHub repositories,\ndefining and operationalizing CE with validated per-month metrics (issues,\ncomments, watchers, stargazers). Non-parametric tests and correlations assessed\nrelationships with project dynamics and lifespan across quartiles. Results: CE\nmetrics significantly associate with project dynamics, with stronger\ncorrelations in highly engaged projects. For lifespan, a complex pattern\nemerged: per-month CE rates are highest in younger projects, declining with\nage. Yet, a subset of long-lived projects maintains exceptionally high\nactivity. Initial CE bursts appear crucial for establishment, while sustained\nhigh engagement drives extreme longevity. Active issue engagement's influence\nintensifies with age, but passive attention's declines. Conclusion: CE\ndynamically drives OSS project longevity and development. Our findings\nestablish validated CE metrics and offer deeper insights into how diverse\ncommunity activity patterns contribute to project longevity.", "AI": {"tldr": "This study analyzes how community engagement (CE) impacts open-source software project dynamics and lifespan using GitHub data from 33,946 repositories, finding that CE metrics significantly correlate with project activity and that both initial engagement bursts and sustained high activity are crucial for longevity.", "motivation": "To quantify the impact of community engagement on open-source software project dynamics and lifespan, as this relationship is underexplored despite its importance for project longevity.", "method": "Analyzed 33,946 GitHub repositories, defined and operationalized community engagement using per-month metrics (issues, comments, watchers, stargazers), and used non-parametric tests and correlations to assess relationships across project quartiles.", "result": "CE metrics significantly associate with project dynamics, with stronger correlations in highly engaged projects. Per-month CE rates are highest in younger projects but decline with age, though some long-lived projects maintain exceptionally high activity. Initial CE bursts are crucial for establishment, while sustained high engagement drives extreme longevity.", "conclusion": "Community engagement dynamically drives OSS project longevity and development, with validated metrics providing insights into how diverse community activity patterns contribute to project success."}}
{"id": "2510.15480", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.15480", "abs": "https://arxiv.org/abs/2510.15480", "authors": ["Muslim Chochlov", "Gul Aftab Ahmed", "James Vincent Patten", "Yuanhua Han", "Guoxian Lu", "David Gregg", "Jim Buckley"], "title": "Selecting and Combining Large Language Models for Scalable Code Clone Detection", "comment": null, "summary": "Source code clones pose risks ranging from intellectual property violations\nto unintended vulnerabilities. Effective and efficient scalable clone\ndetection, especially for diverged clones, remains challenging. Large language\nmodels (LLMs) have recently been applied to clone detection tasks. However, the\nrapid emergence of LLMs raises questions about optimal model selection and\npotential LLM-ensemble efficacy.\n  This paper addresses the first question by identifying 76 LLMs and filtering\nthem down to suitable candidates for large-scale clone detection. The\ncandidates were evaluated on two public industrial datasets, BigCloneBench, and\na commercial large-scale dataset. No uniformly 'best-LLM' emerged, though\nCodeT5+110M, CuBERT and SPTCode were top-performers. Analysis of LLM-candidates\nsuggested that smaller embedding sizes, smaller tokenizer vocabularies and\ntailored datasets are advantageous. On commercial large-scale dataset a\ntop-performing CodeT5+110M achieved 39.71\\% precision: twice the precision of\npreviously used CodeBERT.\n  To address the second question, this paper explores ensembling of the\nselected LLMs: effort-effective approach to improving effectiveness. Results\nsuggest the importance of score normalization and favoring ensembling methods\nlike maximum or sum over averaging. Also, findings indicate that ensembling\napproach can be statistically significant and effective on larger datasets: the\nbest-performing ensemble achieved even higher precision of 46.91\\% over\nindividual LLM on the commercial large-scale code.", "AI": {"tldr": "This paper evaluates 76 LLMs for code clone detection, finding no single best model but identifying CodeT5+110M, CuBERT and SPTCode as top performers. It also explores LLM ensembling approaches that significantly improve detection precision, achieving 46.91% on commercial datasets.", "motivation": "To address challenges in scalable clone detection for diverged clones and determine optimal LLM selection and ensemble efficacy for this task.", "method": "Filtered 76 LLMs to suitable candidates, evaluated on BigCloneBench and commercial datasets. Explored ensembling methods with score normalization and compared maximum/sum vs averaging approaches.", "result": "No uniformly best LLM emerged, but CodeT5+110M achieved 39.71% precision (twice CodeBERT's performance). Ensembling achieved 46.91% precision on commercial datasets, with statistical significance on larger datasets.", "conclusion": "Smaller embedding sizes, smaller tokenizer vocabularies and tailored datasets benefit clone detection. Ensembling with proper score normalization significantly improves effectiveness, especially on large-scale datasets."}}
{"id": "2510.15494", "categories": ["cs.SE", "cs.AI", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.15494", "abs": "https://arxiv.org/abs/2510.15494", "authors": ["Lirong Yi", "Gregory Gay", "Philipp Leitner"], "title": "An Experimental Study of Real-Life LLM-Proposed Performance Improvements", "comment": null, "summary": "Large Language Models (LLMs) can generate code, but can they generate fast\ncode? In this paper, we study this question using a dataset of 65 real-world\ntasks mined from open-source Java programs. We specifically select tasks where\ndevelopers achieved significant speedups, and employ an automated pipeline to\ngenerate patches for these issues using two leading LLMs under four prompt\nvariations. By rigorously benchmarking the results against the baseline and\nhuman-authored solutions, we demonstrate that LLM-generated code indeed\nimproves performance over the baseline in most cases. However, patches proposed\nby human developers outperform LLM fixes by a statistically significant margin,\nindicating that LLMs often fall short of finding truly optimal solutions. We\nfurther find that LLM solutions are semantically identical or similar to the\ndeveloper optimization idea in approximately two-thirds of cases, whereas they\npropose a more original idea in the remaining one-third. However, these\noriginal ideas only occasionally yield substantial performance gains.", "AI": {"tldr": "LLMs can generate code that improves performance over baseline in most cases, but human developers still outperform LLMs by a significant margin in creating optimal solutions.", "motivation": "To investigate whether Large Language Models can generate not just functional code but actually fast and optimized code compared to human developers.", "method": "Used a dataset of 65 real-world Java tasks where developers achieved significant speedups, employed automated pipeline with two leading LLMs under four prompt variations, and benchmarked against baseline and human-authored solutions.", "result": "LLM-generated code improves performance over baseline in most cases, but human patches outperform LLM fixes by statistically significant margin. LLM solutions are semantically similar to developer ideas in ~2/3 cases and original in ~1/3 cases, but original ideas rarely yield substantial gains.", "conclusion": "While LLMs can generate performance-improving code, they often fall short of finding truly optimal solutions compared to human developers, and their original optimization ideas rarely provide significant performance benefits."}}
{"id": "2510.15512", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15512", "abs": "https://arxiv.org/abs/2510.15512", "authors": ["Wachiraphan Charoenwet", "Patanamon Thongtanunam", "Van-Thuan Pham", "Christoph Treude"], "title": "Enhancing Code Review through Fuzzing and Likely Invariants", "comment": null, "summary": "Many software projects employ manual code review to gatekeep defects and\nvulnerabilities in the code before integration. However, reviewers often work\nunder time pressure and rely primarily on static inspection, leaving the\ndynamic aspects of the program unexplored. Dynamic analyses could reveal such\nbehaviors, but they are rarely integrated into reviews. Among them, fuzzing is\ntypically applied later to uncover crashing bugs. Yet its ability to exercise\ncode with diverse inputs makes it promising for exposing non-crashing, but\nunexpected, behaviors earlier. Still, without suitable mechanisms to analyze\nprogram behaviors, the rich data produced during fuzzing remains inaccessible\nto reviewers, limiting its practical value in this context.\n  We hypothesize that unexpected variations in program behaviors could signify\npotential bugs. The impact of code changes can be automatically captured at\nruntime. Representing program behavior as likely invariants, dynamic properties\nconsistently observed at specific program points, can provide practical signals\nof behavioral changes. Such signals offer a way to distinguish between intended\nchanges and unexpected behavioral shifts from code changes.\n  We present FuzzSight, a framework that leverages likely invariants from\nnon-crashing fuzzing inputs to highlight behavioral differences across program\nversions. By surfacing such differences, it provides insights into which code\nblocks may need closer attention. In our evaluation, FuzzSight flagged 75% of\nregression bugs and up to 80% of vulnerabilities uncovered by 24-hour fuzzing.\nIt also outperformed SAST in identifying buggy code blocks, achieving ten times\nhigher detection rates with fewer false alarms. In summary, FuzzSight\ndemonstrates the potential and value of leveraging fuzzing and invariant\nanalysis for early-stage code review, bridging static inspection with dynamic\nbehavioral insights.", "AI": {"tldr": "FuzzSight is a framework that uses fuzzing-generated likely invariants to detect behavioral differences across program versions, helping identify potential bugs during code review.", "motivation": "Manual code reviews often miss dynamic program behaviors due to time constraints and reliance on static inspection. Fuzzing produces rich behavioral data but remains inaccessible to reviewers without proper analysis mechanisms.", "method": "FuzzSight leverages likely invariants from non-crashing fuzzing inputs to capture program behavior variations across versions, highlighting unexpected behavioral changes that may indicate bugs.", "result": "FuzzSight detected 75% of regression bugs and up to 80% of vulnerabilities found by 24-hour fuzzing. It outperformed SAST with 10x higher detection rates and fewer false alarms.", "conclusion": "FuzzSight demonstrates the value of combining fuzzing with invariant analysis for early-stage code review, bridging static inspection with dynamic behavioral insights to improve bug detection."}}
{"id": "2510.15565", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15565", "abs": "https://arxiv.org/abs/2510.15565", "authors": ["Vinicius Moraes de Jesus", "Andre Georghton Cardoso Pacheco"], "title": "Colepp: uma ferramenta multiplataforma para coleta de dados de dispositivos vestiveis", "comment": "in Portuguese language", "summary": "The widespread adoption of wearable devices such as smartwatches and fitness\ntrackers has fueled the demand for reliable physiological and movement data\ncollection tools. However, challenges such as limited access to large,\nhigh-quality public datasets and a lack of control over data collection\nconditions hinder the development of robust algorithms. This work presents\nColepp, an open-source, cross-platform tool designed to collect and synchronize\ndata from multiple wearable devices, including heart rate (via ECG and PPG) and\nmotion signals (accelerometer and gyroscope). The system integrates a\nsmartphone as a central hub, receiving data from a Polar H10 chest strap and a\nWear OS smartwatch, and exporting synchronized datasets in CSV format. Through\na custom synchronization protocol and user-friendly interface, Colepp\nfacilitates the generation of customizable, real-world datasets suitable for\napplications such as human activity recognition and heart rate estimation. A\nuse case shows the effectiveness of the tool in producing consistent and\nsynchronized signals.", "AI": {"tldr": "Colepp is an open-source tool that collects and synchronizes physiological and motion data from multiple wearable devices using a smartphone as a central hub.", "motivation": "Limited access to large, high-quality public datasets and lack of control over data collection conditions hinder development of robust algorithms for wearable device data.", "method": "Uses smartphone as central hub to receive data from Polar H10 chest strap and Wear OS smartwatch, with custom synchronization protocol and user-friendly interface to export synchronized CSV datasets.", "result": "The tool effectively produces consistent and synchronized signals suitable for applications like human activity recognition and heart rate estimation.", "conclusion": "Colepp facilitates generation of customizable, real-world datasets from multiple wearable devices, addressing challenges in wearable data collection."}}
{"id": "2510.15585", "categories": ["cs.SE", "cs.CL", "cs.PL", "F.2.2; I.2.7"], "pdf": "https://arxiv.org/pdf/2510.15585", "abs": "https://arxiv.org/abs/2510.15585", "authors": ["Dr Simon Thorne", "Dr Advait Sarkar"], "title": "Leveraging Test Driven Development with Large Language Models for Reliable and Verifiable Spreadsheet Code Generation: A Research Framework", "comment": "16 pages", "summary": "Large Language Models (LLMs), such as ChatGPT, are increasingly leveraged for\ngenerating both traditional software code and spreadsheet logic. Despite their\nimpressive generative capabilities, these models frequently exhibit critical\nissues such as hallucinations, subtle logical inconsistencies, and syntactic\nerrors, risks particularly acute in high stakes domains like financial\nmodelling and scientific computations, where accuracy and reliability are\nparamount. This position paper proposes a structured research framework that\nintegrates the proven software engineering practice of Test-Driven Development\n(TDD) with Large Language Model (LLM) driven generation to enhance the\ncorrectness of, reliability of, and user confidence in generated outputs. We\nhypothesise that a \"test first\" methodology provides both technical constraints\nand cognitive scaffolding, guiding LLM outputs towards more accurate,\nverifiable, and comprehensible solutions. Our framework, applicable across\ndiverse programming contexts, from spreadsheet formula generation to scripting\nlanguages such as Python and strongly typed languages like Rust, includes an\nexplicitly outlined experimental design with clearly defined participant\ngroups, evaluation metrics, and illustrative TDD based prompting examples. By\nemphasising test driven thinking, we aim to improve computational thinking,\nprompt engineering skills, and user engagement, particularly benefiting\nspreadsheet users who often lack formal programming training yet face serious\nconsequences from logical errors. We invite collaboration to refine and\nempirically evaluate this approach, ultimately aiming to establish responsible\nand reliable LLM integration in both educational and professional development\npractices.", "AI": {"tldr": "This position paper proposes integrating Test-Driven Development (TDD) with LLM-generated code to improve correctness and reliability, especially in high-stakes domains like finance and science.", "motivation": "LLMs often produce code with hallucinations, logical inconsistencies, and errors, creating significant risks in domains where accuracy is critical. Spreadsheet users without formal programming training face serious consequences from such errors.", "method": "A structured research framework that applies TDD principles to LLM-driven generation, using a 'test first' methodology to guide outputs. Includes experimental design with participant groups, evaluation metrics, and TDD-based prompting examples across various programming contexts.", "result": "The framework is proposed but not yet empirically evaluated. The authors invite collaboration to refine and test the approach.", "conclusion": "Integrating TDD with LLM generation can enhance computational thinking, prompt engineering skills, and user engagement, ultimately establishing responsible LLM integration in educational and professional practices."}}
{"id": "2510.15642", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15642", "abs": "https://arxiv.org/abs/2510.15642", "authors": ["Sian Brooke"], "title": "Interact and React: Exploring Gender Patterns in Development and the Impact on Innovation and Robustness of a User Interface Tool", "comment": "Published in AoIR 2025", "summary": "In open-source software design, the inclusion of women is often highlighted\nsimply to remind programmers that women exist. Yet, little attention is given\nto how greater gender diversity, specifically women's participation, could\nfundamentally alter development patterns. To understand the potential impact of\ngender inclusion, this study investigates React, a widely used JavaScript\nlibrary for building user interfaces with an active contributor community. I\nexamine gender differences in metrics of robustness and innovation, as well as\nshifts in contribution patterns leading up to major version releases over 11\nyears of the React project. My results show that the exclusion of women is\ndetrimental to software as women contribute significantly more to feature\nenhancement and dependency management. By exploring how gender influences\ninnovation and robustness in the development of React, the study offers\ncritical insights into how increasing gender diversity could lead to more\ninclusive, innovative, and robust software.", "AI": {"tldr": "This study examines how gender diversity, specifically women's participation, impacts React development patterns, showing women contribute more to feature enhancement and dependency management.", "motivation": "To understand how greater gender diversity could fundamentally alter software development patterns, as current approaches often only superficially acknowledge women's existence without exploring their actual impact.", "method": "Analyzed gender differences in robustness and innovation metrics, and shifts in contribution patterns leading up to major version releases over 11 years of the React project.", "result": "Women contribute significantly more to feature enhancement and dependency management, and the exclusion of women is detrimental to software quality.", "conclusion": "Increasing gender diversity could lead to more inclusive, innovative, and robust software development."}}
{"id": "2510.15690", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.15690", "abs": "https://arxiv.org/abs/2510.15690", "authors": ["Shiwen Ou", "Yuwei Li", "Lu Yu", "Chengkun Wei", "Tingke Wen", "Qiangpu Chen", "Yu Chen", "Haizhi Tang", "Zulie Pan"], "title": "MirrorFuzz: Leveraging LLM and Shared Bugs for Deep Learning Framework APIs Fuzzing", "comment": "Accepted for publication in IEEE Transactions on Software Engineering\n  (TSE), 2025", "summary": "Deep learning (DL) frameworks serve as the backbone for a wide range of\nartificial intelligence applications. However, bugs within DL frameworks can\ncascade into critical issues in higher-level applications, jeopardizing\nreliability and security. While numerous techniques have been proposed to\ndetect bugs in DL frameworks, research exploring common API patterns across\nframeworks and the potential risks they entail remains limited. Notably, many\nDL frameworks expose similar APIs with overlapping input parameters and\nfunctionalities, rendering them vulnerable to shared bugs, where a flaw in one\nAPI may extend to analogous APIs in other frameworks. To address this\nchallenge, we propose MirrorFuzz, an automated API fuzzing solution to discover\nshared bugs in DL frameworks. MirrorFuzz operates in three stages: First,\nMirrorFuzz collects historical bug data for each API within a DL framework to\nidentify potentially buggy APIs. Second, it matches each buggy API in a\nspecific framework with similar APIs within and across other DL frameworks.\nThird, it employs large language models (LLMs) to synthesize code for the API\nunder test, leveraging the historical bug data of similar APIs to trigger\nanalogous bugs across APIs. We implement MirrorFuzz and evaluate it on four\npopular DL frameworks (TensorFlow, PyTorch, OneFlow, and Jittor). Extensive\nevaluation demonstrates that MirrorFuzz improves code coverage by 39.92\\% and\n98.20\\% compared to state-of-the-art methods on TensorFlow and PyTorch,\nrespectively. Moreover, MirrorFuzz discovers 315 bugs, 262 of which are newly\nfound, and 80 bugs are fixed, with 52 of these bugs assigned CNVD IDs.", "AI": {"tldr": "MirrorFuzz is an automated API fuzzing solution that discovers shared bugs across DL frameworks by leveraging historical bug data, API similarity matching, and LLM-generated test code.", "motivation": "DL frameworks have similar APIs with overlapping parameters, making them vulnerable to shared bugs that can cascade across frameworks, but existing techniques don't adequately address this cross-framework vulnerability.", "method": "Three-stage approach: 1) Collect historical bug data to identify buggy APIs, 2) Match buggy APIs with similar APIs across frameworks, 3) Use LLMs to synthesize test code leveraging historical bug patterns to trigger analogous bugs.", "result": "Evaluated on TensorFlow, PyTorch, OneFlow, and Jittor. Improved code coverage by 39.92% (TensorFlow) and 98.20% (PyTorch) compared to state-of-the-art. Found 315 bugs (262 new), with 80 fixed and 52 assigned CNVD IDs.", "conclusion": "MirrorFuzz effectively discovers shared bugs across DL frameworks through API similarity analysis and LLM-powered test generation, significantly outperforming existing methods in both coverage and bug detection."}}
{"id": "2510.15767", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15767", "abs": "https://arxiv.org/abs/2510.15767", "authors": ["Rathi Adarshi Rammohan", "Moritz Meier", "Dennis K\u00fcster", "Tanja Schultz"], "title": "EASELAN: An Open-Source Framework for Multimodal Biosignal Annotation and Data Management", "comment": null, "summary": "Recent advancements in machine learning and adaptive cognitive systems are\ndriving a growing demand for large and richly annotated multimodal data. A\nprominent example of this trend are fusion models, which increasingly\nincorporate multiple biosignals in addition to traditional audiovisual\nchannels. This paper introduces the EASELAN annotation framework to improve\nannotation workflows designed to address the resulting rising complexity of\nmultimodal and biosignals datasets. It builds on the robust ELAN tool by adding\nnew components tailored to support all stages of the annotation pipeline: From\nstreamlining the preparation of annotation files to setting up additional\nchannels, integrated version control with GitHub, and simplified\npost-processing. EASELAN delivers a seamless workflow designed to integrate\nbiosignals and facilitate rich annotations to be readily exported for further\nanalyses and machine learning-supported model training. The EASELAN framework\nis successfully applied to a high-dimensional biosignals collection initiative\non human everyday activities (here, table setting) for cognitive robots within\nthe DFG-funded Collaborative Research Center 1320 Everyday Activity Science and\nEngineering (EASE). In this paper we discuss the opportunities, limitations,\nand lessons learned when using EASELAN for this initiative. To foster research\non biosignal collection, annotation, and processing, the code of EASELAN is\npublicly available(https://github.com/cognitive-systems-lab/easelan), along\nwith the EASELAN-supported fully annotated Table Setting Database.", "AI": {"tldr": "EASELAN is an annotation framework that extends ELAN to handle multimodal and biosignals data, providing streamlined workflows from preparation to post-processing with integrated version control via GitHub.", "motivation": "The growing demand for large, richly annotated multimodal datasets, especially those incorporating biosignals alongside traditional audiovisual channels, requires improved annotation workflows to handle rising complexity.", "method": "EASELAN builds on the ELAN tool by adding components supporting all annotation pipeline stages: file preparation, channel setup, integrated GitHub version control, and simplified post-processing for biosignals integration.", "result": "Successfully applied to a high-dimensional biosignals collection on human everyday activities (table setting) for cognitive robots within the EASE research center, demonstrating practical implementation.", "conclusion": "The framework facilitates rich annotations for machine learning model training, with code and fully annotated Table Setting Database publicly available to foster biosignal research."}}
{"id": "2510.15794", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15794", "abs": "https://arxiv.org/abs/2510.15794", "authors": ["Rachna Raj", "Diego Elias Costa"], "title": "Towards Supporting Open Source Library Maintainers with Community-Based Analytics", "comment": null, "summary": "Open-source software (OSS) is a pillar of modern software development. Its\nsuccess depends on the dedication of maintainers who work constantly to keep\ntheir libraries stable, adapt to changing needs, and support a growing\ncommunity. Yet, they receive little to no continuous feedback on how the\nprojects that rely on their libraries actually use their APIs. We believe that\ngaining these insights can help maintainers make better decisions, such as\nrefining testing strategies, understanding the impact of changes, and guiding\nthe evolution of their libraries more effectively. We propose the use of\ncommunity-based analytics to analyze how an OSS library is used across its\ndependent ecosystem. We conduct an empirical study of 10 popular Java libraries\nand each with their respective dependent ecosystem of 50 projects. Our results\nreveal that while library developers offer a wide range of API methods, only\n16% on average are actively used by their dependent ecosystem. Moreover, only\n74% of the used API methods are partially or fully covered by their library\ntest suite. We propose two metrics to help developers evaluate their test suite\naccording to the APIs used by their community, and we conduct a survey on\nopen-source practitioners to assess the practical value of these insights in\nguiding maintenance decisions.", "AI": {"tldr": "Community-based analytics can help OSS maintainers understand how their APIs are actually used by dependent projects, revealing that only 16% of API methods are actively used and 74% of used methods have test coverage.", "motivation": "OSS maintainers lack continuous feedback on how their libraries are used in dependent projects, which could help them make better decisions about testing strategies, change impact, and library evolution.", "method": "Empirical study of 10 popular Java libraries and their dependent ecosystems (50 projects each), plus proposed metrics for test suite evaluation and a survey of open-source practitioners.", "result": "Only 16% of API methods are actively used by dependent projects, and only 74% of used API methods have partial or full test coverage in their library test suites.", "conclusion": "Community-based analytics provide valuable insights for OSS maintainers to optimize testing strategies and guide library evolution based on actual API usage patterns in the ecosystem."}}
