{"id": "2510.09721", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.09721", "abs": "https://arxiv.org/abs/2510.09721", "authors": ["Jiale Guo", "Suizhi Huang", "Mei Li", "Dong Huang", "Xingsheng Chen", "Regina Zhang", "Zhijiang Guo", "Han Yu", "Siu-Ming Yiu", "Christian Jensen", "Pietro Lio", "Kwok-Yan Lam"], "title": "A Comprehensive Survey on Benchmarks and Solutions in Software Engineering of LLM-Empowered Agentic System", "comment": "21 pages", "summary": "The integration of LLMs into software engineering has catalyzed a paradigm\nshift from traditional rule-based systems to sophisticated agentic systems\ncapable of autonomous problem-solving. Despite this transformation, the field\nlacks a comprehensive understanding of how benchmarks and solutions\ninterconnect, hindering systematic progress and evaluation. This survey\npresents the first holistic analysis of LLM-empowered software engineering,\nbridging the critical gap between evaluation and solution approaches. We\nanalyze 150+ recent papers and organize them into a comprehensive taxonomy\nspanning two major dimensions: (1) Solutions, categorized into prompt-based,\nfine-tuning-based, and agent-based paradigms, and (2) Benchmarks, covering code\ngeneration, translation, repair, and other tasks. Our analysis reveals how the\nfield has evolved from simple prompt engineering to complex agentic systems\nincorporating planning and decomposition, reasoning and self-refinement, memory\nmechanisms, and tool augmentation. We present a unified pipeline that\nillustrates the complete workflow from task specification to final\ndeliverables, demonstrating how different solution paradigms address varying\ncomplexity levels across software engineering tasks. Unlike existing surveys\nthat focus on isolated aspects, we provide full-spectrum coverage connecting\n50+ benchmarks with their corresponding solution strategies, enabling\nresearchers to identify optimal approaches for specific evaluation criteria.\nFurthermore, we identify critical research gaps and propose actionable future\ndirections, including multi-agent collaboration frameworks, self-evolving code\ngeneration systems, and integration of formal verification with LLM-based\nmethods. This survey serves as a foundational resource for researchers and\npractitioners seeking to understand, evaluate, and advance LLM-empowered\nsoftware engineering systems.", "AI": {"tldr": "This survey provides the first holistic analysis of LLM-empowered software engineering, bridging the gap between evaluation benchmarks and solution approaches through a comprehensive taxonomy of 150+ papers.", "motivation": "The field lacks comprehensive understanding of how benchmarks and solutions interconnect in LLM-empowered software engineering, hindering systematic progress and evaluation despite the paradigm shift from traditional rule-based systems to autonomous agentic systems.", "method": "Analyzed 150+ recent papers and organized them into a taxonomy spanning two dimensions: Solutions (prompt-based, fine-tuning-based, agent-based paradigms) and Benchmarks (code generation, translation, repair, etc.). Presented a unified pipeline illustrating workflow from task specification to deliverables.", "result": "Revealed evolution from simple prompt engineering to complex agentic systems with planning, reasoning, memory mechanisms, and tool augmentation. Provided full-spectrum coverage connecting 50+ benchmarks with solution strategies, enabling optimal approach identification for specific evaluation criteria.", "conclusion": "Identified critical research gaps and proposed future directions including multi-agent collaboration, self-evolving code generation, and formal verification integration. Serves as foundational resource for understanding and advancing LLM-empowered software engineering systems."}}
{"id": "2510.09724", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09724", "abs": "https://arxiv.org/abs/2510.09724", "authors": ["Qiaosheng Chen", "Yang Liu", "Lei Li", "Kai Chen", "Qipeng Guo", "Gong Cheng", "Fei Yuan"], "title": "InteractScience: Programmatic and Visually-Grounded Evaluation of Interactive Scientific Demonstration Code Generation", "comment": "27 pages, 17 figures", "summary": "Large Language Models (LLMs) are increasingly capable of generating complete\napplications from natural language instructions, creating new opportunities in\nscience and education. In these domains, interactive scientific demonstrations\nare particularly valuable for explaining concepts, supporting new teaching\nmethods, and presenting research findings. Generating such demonstrations\nrequires models to combine accurate scientific knowledge with the ability to\nimplement interactive front-end code that behaves correctly and responds to\nuser actions. This capability goes beyond the scope of existing benchmarks,\nwhich typically evaluate either knowledge question answering without grounding\nin code or static web code generation without scientific interactivity. To\nevaluate this integrated ability, we design a hybrid framework that combines\nprogrammatic functional testing to rigorously verify interaction logic with\nvisually-grounded qualitative testing to assess rendered outputs against\nreference snapshots. Building on this framework, we present InteractScience, a\nbenchmark consisting of a substantial set of carefully designed questions\nacross five scientific domains, each paired with unit tests, reference\nsnapshots, and checklists. We evaluate 30 leading open- and closed-source LLMs\nand report results that highlight ongoing weaknesses in integrating domain\nknowledge with interactive front-end coding. Our work positions InteractScience\nas the first benchmark to automatically measure this combined capability with\nrealistic interactive operations, providing a foundation for advancing reliable\nand educationally useful scientific demonstration code generation. All code and\ndata are publicly available at https://github.com/open-compass/InteractScience.", "AI": {"tldr": "InteractScience is a new benchmark for evaluating LLMs' ability to generate interactive scientific demonstrations by combining domain knowledge with front-end coding, using programmatic testing and visual verification.", "motivation": "Existing benchmarks don't evaluate the combined capability of accurate scientific knowledge and interactive front-end code generation needed for educational demonstrations.", "method": "Hybrid framework combining programmatic functional testing for interaction logic and visually-grounded qualitative testing against reference snapshots, applied across five scientific domains.", "result": "Evaluation of 30 leading LLMs revealed ongoing weaknesses in integrating domain knowledge with interactive front-end coding.", "conclusion": "InteractScience is the first benchmark to automatically measure this combined capability with realistic interactive operations, advancing reliable scientific demonstration code generation."}}
{"id": "2510.09907", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09907", "abs": "https://arxiv.org/abs/2510.09907", "authors": ["Muhammad Maaz", "Liam DeVoe", "Zac Hatfield-Dodds", "Nicholas Carlini"], "title": "Agentic Property-Based Testing: Finding Bugs Across the Python Ecosystem", "comment": "4 pages (main), NeurIPS 2025, The 4th Deep Learning for Code Workshop", "summary": "Property-based testing (PBT) is a lightweight formal method, typically\nimplemented as a randomized testing framework. Users specify the input domain\nfor their test using combinators supplied by the PBT framework, and the\nexpected properties or invariants as a unit-test function. The framework then\nsearches for a counterexample, e.g. by generating inputs and calling the test\nfunction. In this work, we demonstrate an LLM-based agent which analyzes Python\nmodules, infers function-specific and cross-function properties from code and\ndocumentation, synthesizes and executes PBTs, reflects on outputs of these\ntests to confirm true bugs, and finally outputs actionable bug reports for the\ndeveloper. We perform an extensive evaluation of our agent across 100 popular\nPython packages. Of the bug reports generated by the agent, we found after\nmanual review that 56\\% were valid bugs and 32\\% were valid bugs that we would\nreport to maintainers. We then developed a ranking rubric to surface\nhigh-priority valid bugs to developers, and found that of the 21 top-scoring\nbugs, 86\\% were valid and 81\\% we would report. The bugs span diverse failure\nmodes from serialization failures to numerical precision errors to flawed cache\nimplementations. We reported 5 bugs, 4 with patches, including to NumPy and\ncloud computing SDKs, with 3 patches merged successfully. Our results suggest\nthat LLMs with PBT provides a rigorous and scalable method for autonomously\ntesting software. Our code and artifacts are available at:\nhttps://github.com/mmaaz-git/agentic-pbt.", "AI": {"tldr": "An LLM-based agent that autonomously analyzes Python code, infers properties, synthesizes property-based tests, identifies bugs, and generates actionable bug reports with high accuracy.", "motivation": "To automate software testing by combining LLMs with property-based testing to find bugs in real-world Python packages without manual test writing.", "method": "The agent analyzes Python modules, infers function properties from code and docs, synthesizes PBTs, executes tests, reflects on outputs to confirm bugs, and generates bug reports.", "result": "Tested on 100 popular Python packages: 56% of generated bug reports were valid, 32% were reportable to maintainers. Top 21 bugs had 86% validity and 81% reportability. 4 patches submitted with 3 successfully merged.", "conclusion": "LLMs combined with property-based testing provide a rigorous and scalable method for autonomous software testing, capable of finding diverse bugs in real-world codebases."}}
{"id": "2510.09938", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.09938", "abs": "https://arxiv.org/abs/2510.09938", "authors": ["Youshuai Tan", "Zishuo Ding", "Jinfu Chen", "Weiyi Shang"], "title": "OFP-Repair: Repairing Floating-point Errors via Original-Precision Arithmetic", "comment": null, "summary": "Errors in floating-point programs can lead to severe consequences,\nparticularly in critical domains such as military, aerospace, and financial\nsystems, making their repair a crucial research problem. In practice, some\nerrors can be fixed using original-precision arithmetic, while others require\nhigh-precision computation. Developers often avoid addressing the latter due to\nexcessive computational resources required. However, they sometimes struggle to\ndistinguish between these two types of errors, and existing repair tools fail\nto assist in this differentiation. Most current repair tools rely on\nhigh-precision implementations, which are time-consuming to develop and demand\nspecialized expertise. Although a few tools do not require high-precision\nprograms, they can only fix a limited subset of errors or produce suboptimal\nresults.\n  To address these challenges, we propose a novel method, named OFP-Repair.On\nACESO's dataset, our patches achieve improvements of three, seven, three, and\neight orders of magnitude across four accuracy metrics. In real-world cases,\nour method successfully detects all five original-precision-repairable errors\nand fixes three, whereas ACESO only repairs one. Notably, these results are\nbased on verified data and do not fully capture the potential of OFP-Repair. To\nfurther validate our method, we deploy it on a decade-old open bug report from\nGNU Scientific Library (GSL), successfully repairing five out of 15 bugs. The\ndevelopers have expressed interest in our method and are considering\nintegrating our tool into their development workflow. We are currently working\non applying our patches to GSL. The results are highly encouraging,\ndemonstrating the practical applicability of our technique.", "AI": {"tldr": "OFP-Repair is a novel method for fixing floating-point program errors that can distinguish between errors repairable with original precision vs those requiring high precision, achieving significant accuracy improvements and successfully fixing real-world bugs.", "motivation": "Floating-point errors in critical systems have severe consequences, but developers struggle to distinguish between errors fixable with original precision vs those requiring high precision. Existing tools either rely on time-consuming high-precision implementations or can only fix limited error types.", "method": "The proposed OFP-Repair method addresses the challenge by providing a novel approach that doesn't require high-precision programs and can effectively distinguish between different types of floating-point errors.", "result": "On ACESO's dataset, OFP-Repair achieved improvements of 3-8 orders of magnitude across four accuracy metrics. It successfully detected all five original-precision-repairable errors and fixed three, outperforming ACESO which only repaired one. Additionally, it repaired 5 out of 15 bugs in GNU Scientific Library.", "conclusion": "OFP-Repair demonstrates strong practical applicability, with developers expressing interest in integrating the tool into their workflow. The method shows promise for effectively addressing floating-point errors without the overhead of high-precision implementations."}}
{"id": "2510.09968", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.HC", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.09968", "abs": "https://arxiv.org/abs/2510.09968", "authors": ["Stefan Pasch"], "title": "Operationalizing AI: Empirical Evidence on MLOps Practices, User Satisfaction, and Organizational Context", "comment": null, "summary": "Organizational efforts to utilize and operationalize artificial intelligence\n(AI) are often accompanied by substantial challenges, including scalability,\nmaintenance, and coordination across teams. In response, the concept of Machine\nLearning Operations (MLOps) has emerged as a set of best practices that\nintegrate software engineering principles with the unique demands of managing\nthe ML lifecycle. Yet, empirical evidence on whether and how these practices\nsupport users in developing and operationalizing AI applications remains\nlimited. To address this gap, this study analyzes over 8,000 user reviews of AI\ndevelopment platforms from G2.com. Using zero-shot classification, we measure\nreview sentiment toward nine established MLOps practices, including continuous\nintegration and delivery (CI/CD), workflow orchestration, reproducibility,\nversioning, collaboration, and monitoring. Seven of the nine practices show a\nsignificant positive relationship with user satisfaction, suggesting that\neffective MLOps implementation contributes tangible value to AI development.\nHowever, organizational context also matters: reviewers from small firms\ndiscuss certain MLOps practices less frequently, suggesting that organizational\ncontext influences the prevalence and salience of MLOps, though firm size does\nnot moderate the MLOps-satisfaction link. This indicates that once applied,\nMLOps practices are perceived as universally beneficial across organizational\nsettings.", "AI": {"tldr": "Analysis of 8,000 user reviews shows that 7 out of 9 MLOps practices significantly improve user satisfaction in AI development platforms, with benefits being universally perceived across organizations regardless of size.", "motivation": "Limited empirical evidence exists on whether MLOps practices actually support users in developing and operationalizing AI applications, despite the emergence of MLOps as a solution to challenges in AI implementation.", "method": "Analyzed over 8,000 user reviews from G2.com using zero-shot classification to measure sentiment toward nine established MLOps practices including CI/CD, workflow orchestration, reproducibility, versioning, collaboration, and monitoring.", "result": "Seven of the nine MLOps practices showed significant positive relationship with user satisfaction. Small firms discuss certain MLOps practices less frequently, but firm size does not moderate the MLOps-satisfaction link.", "conclusion": "Effective MLOps implementation provides tangible value to AI development, and once applied, MLOps practices are perceived as universally beneficial across different organizational settings."}}
{"id": "2510.10010", "categories": ["cs.SE", "cs.AI", "68N01, 68T05, 68T07", "D.2.5; D.2.7; I.2.2; I.2.6"], "pdf": "https://arxiv.org/pdf/2510.10010", "abs": "https://arxiv.org/abs/2510.10010", "authors": ["Matheus J. T. Vargas"], "title": "SLEAN: Simple Lightweight Ensemble Analysis Network for Multi-Provider LLM Coordination: Design, Implementation, and Vibe Coding Bug Investigation Case Study", "comment": "14 pages, 4 figures, 6 tables, link to code repo", "summary": "We present SLEAN (Simple Lightweight Ensemble Analysis Network), a\ndeterministic framework for coordinating multiple LLM providers through\ntext-based prompt orchestration. Unlike complex multi-agent systems requiring\nspecialized infrastructure, SLEAN operates as a simple prompt bridge between\nLLMs using .txt templates, requiring no deep technical knowledge for\ndeployment. The three-phase protocol formed by independent analysis,\ncross-critique, and arbitration, filters harmful AI-generated code suggestions\nbefore production deployment, addressing how AI-assisted debugging increasingly\nproduces modifications that introduce unnecessary complexity, break existing\nfunctionality, or address problems. Evaluating 15 software bugs, we analyzed 69\nAI-generated fix propositions. SLEAN's filtering accepted 22 fixes (31.9%, 95%\nCI 20.9-42.9%) while rejecting 47 that would have been harmful if applied\nverbatim. The arbitration process reduced code change surface by 83-90%\nrelative to raw AI outputs, enforcing minimal causal edits over scope-expanding\nmodifications. Minimal Type 2 inputs proved more efficient than detailed Type 1\ninputs, requiring 2.85 versus 3.56 propositions per accepted fix (35.1% versus\n28.1% acceptance, about a 20% efficiency gain). Agreement between AI systems\nshowed weak correlation with fix quality: high convergence (at least 80%)\noccurred in 4 of 15 cases and improved acceptance by only 2.4% points;\narbitration appeared only at exactly 10% convergence in 2 of 15 cases, although\nlow convergence alone did not necessitate arbitration. The file-driven,\nprovider-agnostic architecture enables deployment without specialized coding\nexpertise, making it applicable to security auditing, code review, document\nverification, and other domains requiring reliable multi-provider synthesis\nwith end-to-end auditability.", "AI": {"tldr": "SLEAN is a deterministic framework that coordinates multiple LLM providers through text-based prompt orchestration to filter harmful AI-generated code suggestions before deployment, using a three-phase protocol of independent analysis, cross-critique, and arbitration.", "motivation": "Addresses the problem of AI-assisted debugging increasingly producing modifications that introduce unnecessary complexity, break existing functionality, or address non-existent problems, requiring a reliable way to filter harmful AI-generated code suggestions.", "method": "Three-phase protocol: independent analysis by multiple LLMs, cross-critique between providers, and arbitration to resolve disagreements. Uses simple .txt templates for prompt orchestration without requiring specialized infrastructure or deep technical knowledge.", "result": "Evaluated on 15 software bugs with 69 AI-generated fix propositions. SLEAN accepted 31.9% of fixes while rejecting 47 harmful ones. Reduced code change surface by 83-90% compared to raw AI outputs. Minimal inputs were 20% more efficient than detailed inputs.", "conclusion": "SLEAN provides a file-driven, provider-agnostic architecture that enables reliable multi-provider synthesis with end-to-end auditability, applicable to security auditing, code review, and document verification without requiring specialized coding expertise."}}
{"id": "2510.10066", "categories": ["cs.SE", "cs.AI", "cs.PL"], "pdf": "https://arxiv.org/pdf/2510.10066", "abs": "https://arxiv.org/abs/2510.10066", "authors": ["Shan Jiang", "Chenguang Zhu", "Sarfraz Khurshid"], "title": "OBsmith: Testing JavaScript Obfuscator using LLM-powered sketching", "comment": null, "summary": "JavaScript obfuscators are widely deployed to protect intellectual property\nand resist reverse engineering, yet their correctness has been largely\noverlooked compared to performance and resilience. Existing evaluations\ntypically measure resistance to deobfuscation, leaving the critical question of\nwhether obfuscators preserve program semantics unanswered. Incorrect\ntransformations can silently alter functionality, compromise reliability, and\nerode security-undermining the very purpose of obfuscation. To address this\ngap, we present OBsmith, a novel framework to systematically test JavaScript\nobfuscators using large language models (LLMs). OBsmith leverages LLMs to\ngenerate program sketches abstract templates capturing diverse language\nconstructs, idioms, and corner cases-which are instantiated into executable\nprograms and subjected to obfuscation under different configurations. Besides\nLLM-powered sketching, OBsmith also employs a second source: automatic\nextraction of sketches from real programs. This extraction path enables more\nfocused testing of project specific features and lets developers inject domain\nknowledge into the resulting test cases. OBsmith uncovers 11 previously unknown\ncorrectness bugs. Under an equal program budget, five general purpose\nstate-of-the-art JavaScript fuzzers (FuzzJIT, Jsfunfuzz, Superion, DIE,\nFuzzilli) failed to detect these issues, highlighting OBsmith's complementary\nfocus on obfuscation induced misbehavior. An ablation shows that all components\nexcept our generic MRs contribute to at least one bug class; the negative MR\nresult suggests the need for obfuscator-specific metamorphic relations. Our\nresults also seed discussion on how to balance obfuscation presets and\nperformance cost. We envision OBsmith as an important step towards automated\ntesting and quality assurance of obfuscators and other semantic-preserving\ntoolchains.", "AI": {"tldr": "OBsmith is a framework that uses LLMs to systematically test JavaScript obfuscators for correctness bugs, uncovering 11 previously unknown issues that state-of-the-art fuzzers missed.", "motivation": "JavaScript obfuscators are widely used for intellectual property protection, but their correctness has been overlooked compared to performance and resilience. Incorrect transformations can silently alter functionality, compromising reliability and security.", "method": "OBsmith uses LLMs to generate program sketches (abstract templates) that capture diverse language constructs and corner cases, then instantiates them into executable programs for obfuscation testing. It also extracts sketches from real programs for focused testing.", "result": "OBsmith uncovered 11 previously unknown correctness bugs in JavaScript obfuscators. Five state-of-the-art JavaScript fuzzers failed to detect these issues under equal program budgets, demonstrating OBsmith's complementary focus on obfuscation-induced misbehavior.", "conclusion": "OBsmith represents an important step towards automated testing and quality assurance of obfuscators and other semantic-preserving toolchains, highlighting the need for obfuscator-specific metamorphic relations and balanced obfuscation presets."}}
{"id": "2510.10081", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.10081", "abs": "https://arxiv.org/abs/2510.10081", "authors": ["Youshuai Tan", "Zhanwei Zhang", "Zishuo Ding", "Lianyu Zheng", "Jinfu Chen", "Weiyi Shang"], "title": "A Mathematics-Guided Approach to Floating-Point Error Detection", "comment": null, "summary": "Floating-point program errors can lead to severe consequences, particularly\nin critical domains such as military applications. Only a small subset of\ninputs may induce substantial floating-point errors, prompting researchers to\ndevelop methods for identifying these error-inducing inputs. Although existing\napproaches have achieved some success, they still suffer from two major\nlimitations: (1) High computational cost: The evaluation of error magnitude for\ncandidate inputs relies on high-precision programs, which are prohibitively\ntime-consuming. (2) Limited long-range convergence capability: Current methods\nexhibit inefficiency in search, making the process akin to finding a needle in\na haystack.\n  To address these two limitations, we propose a novel method, named MGDE, to\ndetect error-inducing inputs based on mathematical guidance. By employing the\nNewton-Raphson method, which exhibits quadratic convergence properties, we\nachieve highly effective and efficient results. Since the goal of identifying\nerror-inducing inputs is to uncover the underlying bugs, we use the number of\nbugs detected in floating-point programs as the primary evaluation metric in\nour experiments. As FPCC represents the most effective state-of-the-art\napproach to date, we use it as the baseline for comparison. The dataset of FPCC\nconsists of 88 single-input floating-point programs. FPCC is able to detect 48\nbugs across 29 programs, whereas our method successfully identifies 89 bugs\nacross 44 programs. Moreover, FPCC takes 6.4096 times as long as our proposed\nmethod. We also deploy our method to multi-input programs, identifying a total\nof nine bugs with an average detection time of 0.6443 seconds per program. In\ncontrast, FPCC fails to detect any bugs while requiring an average computation\ntime of 100 seconds per program.", "AI": {"tldr": "MGDE is a novel method that uses mathematical guidance (Newton-Raphson method) to efficiently detect error-inducing inputs in floating-point programs, significantly outperforming state-of-the-art FPCC in bug detection rate and computational speed.", "motivation": "Existing methods for detecting floating-point program errors suffer from high computational costs due to reliance on high-precision programs and limited long-range convergence capability, making the search process inefficient like finding a needle in a haystack.", "method": "Proposed MGDE method uses mathematical guidance through the Newton-Raphson method, which exhibits quadratic convergence properties, to achieve highly effective and efficient detection of error-inducing inputs.", "result": "MGDE detected 89 bugs across 44 programs vs FPCC's 48 bugs across 29 programs, with 6.4x faster computation. For multi-input programs, MGDE found 9 bugs with 0.6443s average detection time, while FPCC found no bugs and took 100s per program.", "conclusion": "MGDE significantly outperforms state-of-the-art methods in both bug detection capability and computational efficiency, demonstrating the effectiveness of mathematical guidance for floating-point error detection."}}
{"id": "2510.10119", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.10119", "abs": "https://arxiv.org/abs/2510.10119", "authors": ["Liutong Han", "Zhiyuan Tan", "Hongbin Zhang", "Pengcheng Wang", "Chu Kang", "Mingjie Xing", "Yanjun Wu"], "title": "IntrinTrans: LLM-based Intrinsic Code Translator for RISC-V Vector", "comment": "9 pages", "summary": "The use of intrinsic functions to exploit hardware-specific capabilities is\nan important approach for optimizing library performance. Many mainstream\nlibraries implement a large number of vectorized algorithms on Arm or x86 SIMD\nintrinsic functions. With the rapid expansion of the RISC-V hardware-software\necosystem, there is a growing demand for support of the RISC-V Vector (RVV)\nextension. Translating existing vectorized intrinsic code onto RVV intrinsics\nis a practical and effective approach. However, current cross-architecture\ntranslation largely relies on manual rewriting, which is time-consuming and\nerror-prone. Furthermore, while some rule-based methods can reduce the need for\nmanual intervention, their translation success rate is limited by incomplete\nrule coverage and syntactic constraints, and the performance suffers from\ninadequate utilization of RVV-specific features. We present IntrinTrans, a\nLLM-based multi-agent approach that utilizes compile-and-test feedback to\ntranslate intrinsic code across architectures automatically, and further\noptimizes the generated RVV intrinsics using register-usage information derived\nfrom liveness analysis. To evaluate the effectiveness of our approach, we\ncollected 34 vectorized algorithm cases from open-source libraries. Each case\nincludes an Arm Neon intrinsics implementation and a RVV intrinsics\nimplementation contributed by the open-source community, together with\ncorrectness and performance tests. Our experiments show that advanced LLMs\nproduce semantically correct RISC-V Vector intrinsics in most cases within a\nlimited number of iterations, and in some cases achieve up to 5.93x the\nperformance of the native implementation from the open-source community.", "AI": {"tldr": "IntrinTrans is an LLM-based multi-agent system that automatically translates SIMD intrinsic code between architectures (e.g., Arm Neon to RISC-V Vector) using compile-and-test feedback and optimizes performance through register-usage analysis.", "motivation": "Manual translation of vectorized intrinsic code across architectures is time-consuming and error-prone, while existing rule-based methods have limited success rates and poor performance due to incomplete rule coverage and inadequate use of target architecture features.", "method": "Uses LLM-based multi-agent approach with compile-and-test feedback for automatic translation, combined with register-usage optimization from liveness analysis to better utilize RISC-V Vector specific features.", "result": "Successfully translated 34 vectorized algorithms from Arm Neon to RISC-V Vector intrinsics, achieving semantic correctness in most cases within limited iterations, with some implementations reaching up to 5.93x performance improvement over community implementations.", "conclusion": "IntrinTrans demonstrates that LLM-based approaches with feedback mechanisms can effectively automate cross-architecture intrinsic translation while achieving significant performance improvements over manual implementations."}}
{"id": "2510.10148", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.10148", "abs": "https://arxiv.org/abs/2510.10148", "authors": ["Mengyao Zhao", "Kaixuan Li", "Lyuye Zhang", "Wenjing Dang", "Chenggong Ding", "Sen Chen", "Zheli Liu"], "title": "A Systematic Study on Generating Web Vulnerability Proof-of-Concepts Using Large Language Models", "comment": null, "summary": "Recent advances in Large Language Models (LLMs) have brought remarkable\nprogress in code understanding and reasoning, creating new opportunities and\nraising new concerns for software security. Among many downstream tasks,\ngenerating Proof-of-Concept (PoC) exploits plays a central role in\nvulnerability reproduction, comprehension, and mitigation. While previous\nresearch has focused primarily on zero-day exploitation, the growing\navailability of rich public information accompanying disclosed CVEs leads to a\nnatural question: can LLMs effectively use this information to automatically\ngenerate valid PoCs? In this paper, we present the first empirical study of\nLLM-based PoC generation for web application vulnerabilities, focusing on the\npractical feasibility of leveraging publicly disclosed information. We evaluate\nGPT-4o and DeepSeek-R1 on 100 real-world and reproducible CVEs across three\nstages of vulnerability disclosure: (1) newly disclosed vulnerabilities with\nonly descriptions, (2) 1-day vulnerabilities with patches, and (3) N-day\nvulnerabilities with full contextual code. Our results show that LLMs can\nautomatically generate working PoCs in 8%-34% of cases using only public data,\nwith DeepSeek-R1 consistently outperforming GPT-4o. Further analysis shows that\nsupplementing code context improves success rates by 17%-20%, with\nfunction-level providing 9%-13% improvement than file-level ones. Further\nintegrating adaptive reasoning strategies to prompt refinement significantly\nimproves success rates to 68%-72%. Our findings suggest that LLMs could reshape\nvulnerability exploitation dynamics. To date, 23 newly generated PoCs have been\naccepted by NVD and Exploit DB.", "AI": {"tldr": "LLMs can automatically generate working Proof-of-Concept exploits for web vulnerabilities using public CVE information, with success rates of 8%-34% using basic data and up to 68%-72% with adaptive reasoning strategies.", "motivation": "To investigate whether LLMs can effectively leverage publicly disclosed CVE information to automatically generate valid PoC exploits for web application vulnerabilities, addressing a gap in previous research focused on zero-day exploitation.", "method": "Empirical evaluation of GPT-4o and DeepSeek-R1 on 100 real-world CVEs across three disclosure stages: newly disclosed (descriptions only), 1-day (with patches), and N-day (with full code context), using different levels of code context and adaptive reasoning strategies.", "result": "LLMs generated working PoCs in 8%-34% of cases using public data alone, with DeepSeek-R1 outperforming GPT-4o. Code context improved success by 17%-20%, and adaptive reasoning strategies boosted success rates to 68%-72%. 23 generated PoCs were accepted by NVD and Exploit DB.", "conclusion": "LLMs can effectively generate valid PoC exploits using public vulnerability information, potentially reshaping vulnerability exploitation dynamics and demonstrating practical feasibility for automated exploit generation."}}
{"id": "2510.10179", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.10179", "abs": "https://arxiv.org/abs/2510.10179", "authors": ["Linghan Huang", "Peizhou Zhao", "Huaming Chen"], "title": "LLMs are All You Need? Improving Fuzz Testing for MOJO with Large Language Models", "comment": null, "summary": "The rapid development of large language models (LLMs) has revolutionized\nsoftware testing, particularly fuzz testing, by automating the generation of\ndiverse and effective test inputs. This advancement holds great promise for\nimproving software reliability. Meanwhile, the introduction of MOJO, a\nhigh-performance AI programming language blending Python's usability with the\nefficiency of C and C++, presents new opportunities to enhance AI model\nscalability and programmability. However, as a new language, MOJO lacks\ncomprehensive testing frameworks and a sufficient corpus for LLM-based testing,\nwhich exacerbates model hallucination. In this case, LLMs will generate\nsyntactically valid but semantically incorrect code, significantly reducing the\neffectiveness of fuzz testing. To address this challenge, we propose\nMOJOFuzzer, the first adaptive LLM-based fuzzing framework designed for\nzero-shot learning environments of emerging programming languages. MOJOFuzzer\nintegrates a mutil-phase framework that systematically eliminates low-quality\ngenerated inputs before execution, significantly improving test case validity.\nFurthermore, MOJOFuzzer dynamically adapts LLM prompts based on runtime\nfeedback for test case mutation, enabling an iterative learning process that\ncontinuously enhances fuzzing efficiency and bug detection performance. Our\nexperimental results demonstrate that MOJOFuzzer significantly enhances test\nvalidity, API coverage, and bug detection performance, outperforming\ntraditional fuzz testing and state-of-the-art LLM-based fuzzing approaches.\nUsing MOJOFuzzer, we have conducted a first large-scale fuzz testing evaluation\nof MOJO, uncorvering 13 previous unknown bugs. This study not only advances the\nfield of LLM-driven software testing but also establishes a foundational\nmethodology for leveraging LLMs in the testing of emerging programming\nlanguages.", "AI": {"tldr": "MOJOFuzzer is the first adaptive LLM-based fuzzing framework for emerging programming languages like MOJO, addressing model hallucination through multi-phase filtering and dynamic prompt adaptation, significantly improving test validity and bug detection.", "motivation": "MOJO language lacks comprehensive testing frameworks and sufficient corpus for LLM-based testing, leading to model hallucination where LLMs generate syntactically valid but semantically incorrect code, reducing fuzz testing effectiveness.", "method": "MOJOFuzzer integrates a multi-phase framework that eliminates low-quality generated inputs before execution and dynamically adapts LLM prompts based on runtime feedback for test case mutation, enabling iterative learning.", "result": "MOJOFuzzer significantly enhances test validity, API coverage, and bug detection performance, outperforming traditional fuzz testing and state-of-the-art LLM-based approaches. It uncovered 13 previously unknown bugs in MOJO.", "conclusion": "The study advances LLM-driven software testing and establishes a foundational methodology for leveraging LLMs in testing emerging programming languages, demonstrating MOJOFuzzer's effectiveness in zero-shot learning environments."}}
{"id": "2510.10290", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.10290", "abs": "https://arxiv.org/abs/2510.10290", "authors": ["Sayan Mandal", "Hua Jiang"], "title": "Grounded AI for Code Review: Resource-Efficient Large-Model Serving in Enterprise Pipelines", "comment": "Submitted to MLSys 2026", "summary": "Automated code review adoption lags in compliance-heavy settings, where\nstatic analyzers produce high-volume, low-rationale outputs, and naive LLM use\nrisks hallucination and incurring cost overhead. We present a production system\nfor grounded, PR-native review that pairs static-analysis findings with\nAST-guided context extraction and a single-GPU, on-demand serving stack\n(quantized open-weight model, multi-tier caching) to deliver concise\nexplanations and remediation guidance. Evaluated on safety-oriented C/C++\nstandards, the approach achieves sub-minute median first-feedback (offline p50\nbuild+LLM 59.8s) while maintaining competitive violation reduction and lower\nviolation rates versus larger proprietary models. The architecture is\ndecoupled: teams can adopt the grounding/prompting layer or the serving layer\nindependently. A small internal survey (n=8) provides directional signals of\nreduced triage effort and moderate perceived grounding, with participants\nreporting fewer human review iterations. We outline operational lessons and\nlimitations, emphasizing reproducibility, auditability, and pathways to broader\nstandards and assisted patching.", "AI": {"tldr": "A production system for automated code review that combines static analysis with AST-guided context extraction and efficient LLM serving to provide grounded, concise explanations and remediation guidance for compliance-heavy C/C++ code.", "motivation": "Automated code review adoption lags in compliance-heavy settings due to high-volume static analyzer outputs with low rationale and risks of LLM hallucination and cost overhead.", "method": "Pairs static-analysis findings with AST-guided context extraction and uses a single-GPU on-demand serving stack with quantized open-weight model and multi-tier caching for efficient, grounded code review.", "result": "Achieves sub-minute median first-feedback (59.8s offline p50 build+LLM) while maintaining competitive violation reduction and lower violation rates versus larger proprietary models.", "conclusion": "The decoupled architecture allows independent adoption of grounding/prompting or serving layers, with survey results showing reduced triage effort and fewer human review iterations, emphasizing reproducibility and auditability."}}
{"id": "2510.10320", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.10320", "abs": "https://arxiv.org/abs/2510.10320", "authors": ["Lorena Poenaru-Olaru", "Wouter van 't Hof", "Adrian Stando", "Arkadiusz P. Trawinski", "Eileen Kapel", "Jan S. Rellermeyer", "Luis Cruz", "Arie van Deursen"], "title": "Prepared for the Unknown: Adapting AIOps Capacity Forecasting Models to Data Changes", "comment": null, "summary": "Capacity management is critical for software organizations to allocate\nresources effectively and meet operational demands. An important step in\ncapacity management is predicting future resource needs often relies on\ndata-driven analytics and machine learning (ML) forecasting models, which\nrequire frequent retraining to stay relevant as data evolves. Continuously\nretraining the forecasting models can be expensive and difficult to scale,\nposing a challenge for engineering teams tasked with balancing accuracy and\nefficiency. Retraining only when the data changes appears to be a more\ncomputationally efficient alternative, but its impact on accuracy requires\nfurther investigation. In this work, we investigate the effects of retraining\ncapacity forecasting models for time series based on detected changes in the\ndata compared to periodic retraining. Our results show that drift-based\nretraining achieves comparable forecasting accuracy to periodic retraining in\nmost cases, making it a cost-effective strategy. However, in cases where data\nis changing rapidly, periodic retraining is still preferred to maximize the\nforecasting accuracy. These findings offer actionable insights for software\nteams to enhance forecasting systems, reducing retraining overhead while\nmaintaining robust performance.", "AI": {"tldr": "Drift-based retraining of capacity forecasting models achieves comparable accuracy to periodic retraining in most cases, offering a cost-effective alternative while maintaining performance.", "motivation": "Continuous retraining of ML forecasting models for capacity management is expensive and difficult to scale, creating a need for more efficient retraining strategies that balance accuracy and computational costs.", "method": "Investigating the effects of retraining capacity forecasting models based on detected data changes (drift-based) compared to periodic retraining for time series data.", "result": "Drift-based retraining achieves comparable forecasting accuracy to periodic retraining in most cases, making it cost-effective. However, for rapidly changing data, periodic retraining still provides better accuracy.", "conclusion": "Drift-based retraining offers a viable cost-effective strategy for capacity forecasting systems, reducing retraining overhead while maintaining robust performance, though periodic retraining remains preferable for rapidly evolving data scenarios."}}
{"id": "2510.10321", "categories": ["cs.SE", "cs.AI", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.10321", "abs": "https://arxiv.org/abs/2510.10321", "authors": ["Jugal Gajjar", "Kaustik Ranaware", "Kamalasankari Subramaniakuppusamy"], "title": "Bridging Semantics & Structure for Software Vulnerability Detection using Hybrid Network Models", "comment": "13 pages, 3 figures, 5 tables, 14 equations, accepted at the 14th\n  International Conference on Complex Networks and Their Applications (COMPLEX\n  NETWORKS 2025) and the conference proceedings will be published by Springer\n  in the Studies in Computational Intelligence series", "summary": "Software vulnerabilities remain a persistent risk, yet static and dynamic\nanalyses often overlook structural dependencies that shape insecure behaviors.\nViewing programs as heterogeneous graphs, we capture control- and data-flow\nrelations as complex interaction networks. Our hybrid framework combines these\ngraph representations with light-weight (<4B) local LLMs, uniting topological\nfeatures with semantic reasoning while avoiding the cost and privacy concerns\nof large cloud models. Evaluated on Java vulnerability detection (binary\nclassification), our method achieves 93.57% accuracy-an 8.36% gain over Graph\nAttention Network-based embeddings and 17.81% over pretrained LLM baselines\nsuch as Qwen2.5 Coder 3B. Beyond accuracy, the approach extracts salient\nsubgraphs and generates natural language explanations, improving\ninterpretability for developers. These results pave the way for scalable,\nexplainable, and locally deployable tools that can shift vulnerability analysis\nfrom purely syntactic checks to deeper structural and semantic insights,\nfacilitating broader adoption in real-world secure software development.", "AI": {"tldr": "A hybrid framework combining heterogeneous program graphs with lightweight local LLMs achieves 93.57% accuracy in Java vulnerability detection, outperforming Graph Attention Networks and pretrained LLMs while providing interpretable explanations.", "motivation": "Current static and dynamic analyses often miss structural dependencies that lead to insecure behaviors, and existing approaches face cost and privacy concerns with large cloud models.", "method": "View programs as heterogeneous graphs capturing control- and data-flow relations, then combine these graph representations with lightweight (<4B) local LLMs to unite topological features with semantic reasoning.", "result": "Achieves 93.57% accuracy in Java vulnerability detection (binary classification), representing an 8.36% improvement over Graph Attention Network-based embeddings and 17.81% over pretrained LLM baselines like Qwen2.5 Coder 3B.", "conclusion": "The approach enables scalable, explainable, and locally deployable vulnerability analysis tools that shift from purely syntactic checks to deeper structural and semantic insights, facilitating broader adoption in secure software development."}}
{"id": "2510.10460", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.10460", "abs": "https://arxiv.org/abs/2510.10460", "authors": ["Zongyi Lyu", "Songqiang Chen", "Zhenlan Ji", "Liwen Wang", "Shuai Wang", "Daoyuan Wu", "Wenxuan Wang", "Shing-Chi Cheung"], "title": "Testing and Enhancing Multi-Agent Systems for Robust Code Generation", "comment": "19pages, 5 figures", "summary": "Multi-agent systems (MASs) have emerged as a promising paradigm for automated\ncode generation, demonstrating impressive performance on established benchmarks\nby decomposing complex coding tasks across specialized agents with different\nroles. Despite their prosperous development and adoption, their robustness\nremains pressingly under-explored, raising critical concerns for real-world\ndeployment. This paper presents the first comprehensive study examining the\nrobustness of MASs for code generation through a fuzzing-based testing\napproach. By designing a fuzzing pipeline incorporating semantic-preserving\nmutation operators and a novel fitness function, we assess mainstream MASs\nacross multiple datasets and LLMs. Our findings reveal substantial robustness\nflaws of various popular MASs: they fail to solve 7.9%-83.3% of problems they\ninitially resolved successfully after applying the semantic-preserving\nmutations. Through comprehensive failure analysis, we identify a common yet\nlargely overlooked cause of the robustness issue: miscommunications between\nplanning and coding agents, where plans lack sufficient detail and coding\nagents misinterpret intricate logic, aligning with the challenges inherent in a\nmulti-stage information transformation process. Accordingly, we also propose a\nrepairing method that encompasses multi-prompt generation and introduces a new\nmonitor agent to address this issue. Evaluation shows that our repairing method\neffectively enhances the robustness of MASs by solving 40.0%-88.9% of\nidentified failures. Our work uncovers critical robustness flaws in MASs and\nprovides effective mitigation strategies, contributing essential insights for\ndeveloping more reliable MASs for code generation.", "AI": {"tldr": "This paper presents the first comprehensive study on the robustness of multi-agent systems (MASs) for code generation, revealing significant vulnerabilities through fuzzing-based testing and proposing effective mitigation strategies.", "motivation": "Despite the promising performance of MASs in automated code generation, their robustness remains largely unexplored, raising critical concerns for real-world deployment and reliability.", "method": "The study uses a fuzzing-based testing approach with semantic-preserving mutation operators and a novel fitness function to assess mainstream MASs across multiple datasets and LLMs.", "result": "The research reveals substantial robustness flaws in popular MASs, showing they fail to solve 7.9%-83.3% of problems they initially resolved successfully after semantic-preserving mutations. The main cause is miscommunication between planning and coding agents.", "conclusion": "The paper uncovers critical robustness flaws in MASs for code generation and provides effective mitigation strategies through a repairing method that enhances robustness by solving 40.0%-88.9% of identified failures, contributing essential insights for developing more reliable MASs."}}
{"id": "2510.10551", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.10551", "abs": "https://arxiv.org/abs/2510.10551", "authors": ["Baris Ardic", "Quentin Le Dilavrec", "Andy Zaidman"], "title": "How Students Use Generative AI for Software Testing: An Observational Study", "comment": "39 pages, 6 figures, journal submission", "summary": "The integration of generative AI tools like ChatGPT into software engineering\nworkflows opens up new opportunities to boost productivity in tasks such as\nunit test engineering. However, these AI-assisted workflows can also\nsignificantly alter the developer's role, raising concerns about control,\noutput quality, and learning, particularly for novice developers. This study\ninvestigates how novice software developers with foundational knowledge in\nsoftware testing interact with generative AI for engineering unit tests. Our\ngoal is to examine the strategies they use, how heavily they rely on generative\nAI, and the benefits and challenges they perceive when using generative\nAI-assisted approaches for test engineering. We conducted an observational\nstudy involving 12 undergraduate students who worked with generative AI for\nunit testing tasks. We identified four interaction strategies, defined by\nwhether the test idea or the test implementation originated from generative AI\nor the participant. Additionally, we singled out prompting styles that focused\non one-shot or iterative test generation, which often aligned with the broader\ninteraction strategy. Students reported benefits including time-saving, reduced\ncognitive load, and support for test ideation, but also noted drawbacks such as\ndiminished trust, test quality concerns, and lack of ownership. While strategy\nand prompting styles influenced workflow dynamics, they did not significantly\naffect test effectiveness or test code quality as measured by mutation score or\ntest smells.", "AI": {"tldr": "This study examines how novice developers use generative AI for unit testing, identifying four interaction strategies and prompting styles, with benefits like time-saving but drawbacks including trust issues and quality concerns.", "motivation": "To understand how generative AI tools like ChatGPT affect novice developers' workflows in unit testing, particularly regarding control, output quality, and learning outcomes.", "method": "Observational study with 12 undergraduate students working on unit testing tasks using generative AI, analyzing interaction strategies and prompting styles.", "result": "Identified four interaction strategies based on test idea/implementation origin, and two prompting styles (one-shot vs iterative). Benefits included time-saving and reduced cognitive load, while drawbacks involved trust issues and quality concerns. Strategy and prompting styles didn't significantly affect test effectiveness or code quality.", "conclusion": "Generative AI can assist novice developers in unit testing but raises concerns about trust, quality, and ownership that need addressing in AI-assisted workflows."}}
{"id": "2510.10819", "categories": ["cs.SE", "cs.AI", "68N01, 68T05, 68T07, 68T50", "D.2.2; D.2.5; D.2.6; D.2.8; I.2.6; I.2.7; I.2.11"], "pdf": "https://arxiv.org/pdf/2510.10819", "abs": "https://arxiv.org/abs/2510.10819", "authors": ["Vivek Acharya"], "title": "Generative AI and the Transformation of Software Development Practices", "comment": "16 pages; 1 figure; preprint; v", "summary": "Generative AI is reshaping how software is designed, written, and maintained.\nAdvances in large language models (LLMs) are enabling new development styles -\nfrom chat-oriented programming and 'vibe coding' to agentic programming - that\ncan accelerate productivity and broaden access. This paper examines how\nAI-assisted techniques are changing software engineering practice, and the\nrelated issues of trust, accountability, and shifting skills. We survey\niterative chat-based development, multi-agent systems, dynamic prompt\norchestration, and integration via the Model Context Protocol (MCP). Using case\nstudies and industry data, we outline both the opportunities (faster cycles,\ndemocratized coding) and the challenges (model reliability and cost) of\napplying generative AI to coding. We describe new roles, skills, and best\npractices for using AI in a responsible and effective way.", "AI": {"tldr": "This paper examines how generative AI and large language models are transforming software engineering practices, including new development styles like chat-oriented programming and agentic programming, while addressing challenges around trust, reliability, and skills.", "motivation": "To understand how AI-assisted techniques are changing software engineering practice and address related issues of trust, accountability, and shifting skill requirements in the era of generative AI.", "method": "The paper surveys various AI-assisted development approaches including iterative chat-based development, multi-agent systems, dynamic prompt orchestration, and integration via Model Context Protocol (MCP), using case studies and industry data.", "result": "The research outlines opportunities such as faster development cycles and democratized coding, while identifying challenges including model reliability and cost considerations in applying generative AI to coding.", "conclusion": "The paper describes new roles, skills, and best practices needed for using AI in software engineering in a responsible and effective way, emphasizing the evolving nature of development practices with generative AI."}}
{"id": "2510.10824", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.10824", "abs": "https://arxiv.org/abs/2510.10824", "authors": ["Mohanakrishnan Hariharan", "Satish Arvapalli", "Seshu Barma", "Evangeline Sheela"], "title": "Agentic RAG for Software Testing with Hybrid Vector-Graph and Multi-Agent Orchestration", "comment": null, "summary": "We present an approach to software testing automation using Agentic\nRetrieval-Augmented Generation (RAG) systems for Quality Engineering (QE)\nartifact creation. We combine autonomous AI agents with hybrid vector-graph\nknowledge systems to automate test plan, case, and QE metric generation. Our\napproach addresses traditional software testing limitations by leveraging LLMs\nsuch as Gemini and Mistral, multi-agent orchestration, and enhanced\ncontextualization. The system achieves remarkable accuracy improvements from\n65% to 94.8% while ensuring comprehensive document traceability throughout the\nquality engineering lifecycle. Experimental validation of enterprise Corporate\nSystems Engineering and SAP migration projects demonstrates an 85% reduction in\ntesting timeline, an 85% improvement in test suite efficiency, and projected\n35% cost savings, resulting in a 2-month acceleration of go-live.", "AI": {"tldr": "Automated software testing using Agentic RAG systems that combine AI agents with hybrid vector-graph knowledge to generate test plans, cases, and metrics, achieving 94.8% accuracy and significant efficiency improvements.", "motivation": "To address limitations in traditional software testing by automating quality engineering artifact creation and improving testing efficiency through AI-powered systems.", "method": "Combines autonomous AI agents with hybrid vector-graph knowledge systems, leveraging LLMs (Gemini and Mistral), multi-agent orchestration, and enhanced contextualization for test automation.", "result": "Achieved 94.8% accuracy (from 65%), 85% reduction in testing timeline, 85% improvement in test suite efficiency, 35% cost savings, and 2-month acceleration of go-live in enterprise projects.", "conclusion": "Agentic RAG systems successfully automate software testing with dramatic improvements in accuracy, efficiency, and cost-effectiveness while maintaining comprehensive document traceability."}}
{"id": "2510.10840", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.10840", "abs": "https://arxiv.org/abs/2510.10840", "authors": ["Seshu Barma", "Mohanakrishnan Hariharan", "Satish Arvapalli"], "title": "Software Defect Prediction using Autoencoder Transformer Model", "comment": null, "summary": "An AI-ML-powered quality engineering approach uses AI-ML to enhance software\nquality assessments by predicting defects. Existing ML models struggle with\nnoisy data types, imbalances, pattern recognition, feature extraction, and\ngeneralization. To address these challenges, we develop a new model, Adaptive\nDifferential Evolution (ADE) based Quantum Variational Autoencoder-Transformer\n(QVAET) Model (ADE-QVAET). ADE combines with QVAET to obtain high-dimensional\nlatent features and maintain sequential dependencies, resulting in enhanced\ndefect prediction accuracy. ADE optimization enhances model convergence and\npredictive performance. ADE-QVAET integrates AI-ML techniques such as tuning\nhyperparameters for scalable and accurate software defect prediction,\nrepresenting an AI-ML-driven technology for quality engineering. During\ntraining with a 90% training percentage, ADE-QVAET achieves high accuracy,\nprecision, recall, and F1-score of 98.08%, 92.45%, 94.67%, and 98.12%,\nrespectively, when compared to the Differential Evolution (DE) ML model.", "AI": {"tldr": "The paper proposes ADE-QVAET, an AI-ML model combining Adaptive Differential Evolution with Quantum Variational Autoencoder-Transformer for enhanced software defect prediction, achieving over 98% accuracy.", "motivation": "Existing ML models struggle with noisy data, imbalances, pattern recognition, feature extraction, and generalization in software quality assessment.", "method": "Developed ADE-QVAET model that combines Adaptive Differential Evolution optimization with Quantum Variational Autoencoder-Transformer to extract high-dimensional latent features while maintaining sequential dependencies.", "result": "Achieved 98.08% accuracy, 92.45% precision, 94.67% recall, and 98.12% F1-score with 90% training data, outperforming Differential Evolution ML model.", "conclusion": "ADE-QVAET represents an effective AI-ML-driven technology for quality engineering, providing scalable and accurate software defect prediction through optimized hyperparameter tuning."}}
{"id": "2510.10887", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.10887", "abs": "https://arxiv.org/abs/2510.10887", "authors": ["Lakshana Iruni Assalaarachchi", "Zainab Masood", "Rashina Hoda", "John Grundy"], "title": "Generative AI for Software Project Management: Insights from a Review of Software Practitioner Literature", "comment": null, "summary": "Software practitioners are discussing GenAI transformations in software\nproject management openly and widely. To understand the state of affairs, we\nperformed a grey literature review using 47 publicly available practitioner\nsources including blogs, articles, and industry reports. We found that software\nproject managers primarily perceive GenAI as an \"assistant\", \"copilot\", or\n\"friend\" rather than as a \"PM replacement\", with support of GenAI in automating\nroutine tasks, predictive analytics, communication and collaboration, and in\nagile practices leading to project success. Practitioners emphasize responsible\nGenAI usage given concerns such as hallucinations, ethics and privacy, and lack\nof emotional intelligence and human judgment. We present upskilling\nrequirements for software project managers in the GenAI era mapped to the\nProject Management Institute's talent triangle. We share key recommendations\nfor both practitioners and researchers.", "AI": {"tldr": "Software project managers view GenAI as an assistant/copilot rather than replacement, with benefits in task automation, analytics, communication, and agile practices, but emphasize responsible usage due to concerns like hallucinations and ethics.", "motivation": "To understand how software practitioners are discussing and implementing GenAI transformations in software project management through publicly available practitioner sources.", "method": "Grey literature review using 47 publicly available practitioner sources including blogs, articles, and industry reports.", "result": "Software project managers primarily perceive GenAI as an assistant/copilot/friend rather than replacement, with support in automating routine tasks, predictive analytics, communication/collaboration, and agile practices. Concerns include hallucinations, ethics/privacy, and lack of emotional intelligence.", "conclusion": "Upskilling requirements for software project managers in GenAI era are presented, mapped to PMI's talent triangle, with key recommendations for practitioners and researchers."}}
{"id": "2510.10956", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.10956", "abs": "https://arxiv.org/abs/2510.10956", "authors": ["Zhiqiang Yuan", "Wenjun Mao", "Zhuo Chen", "Xiyue Shang", "Chong Wang", "Yiling Lou", "Xin Peng"], "title": "Project-Level C-to-Rust Translation via Synergistic Integration of Knowledge Graphs and Large Language Models", "comment": null, "summary": "Translating C code into safe Rust is an effective way to ensure its memory\nsafety. Compared to rule-based translation which produces Rust code that\nremains largely unsafe, LLM-based methods can generate more idiomatic and safer\nRust code because LLMs have been trained on vast amount of human-written\nidiomatic code. Although promising, existing LLM-based methods still struggle\nwith project-level C-to-Rust translation. They typically partition a C project\ninto smaller units (\\eg{} functions) based on call graphs and translate them\nbottom-up to resolve program dependencies. However, this bottom-up,\nunit-by-unit paradigm often fails to translate pointers due to the lack of a\nglobal perspective on their usage. To address this problem, we propose a novel\nC-Rust Pointer Knowledge Graph (KG) that enriches a code-dependency graph with\ntwo types of pointer semantics: (i) pointer-usage information which record\nglobal behaviors such as points-to flows and map lower-level struct usage to\nhigher-level units; and (ii) Rust-oriented annotations which encode ownership,\nmutability, nullability, and lifetime. Synthesizing the \\kg{} with LLMs, we\nfurther propose \\ourtool{}, which implements a project-level C-to-Rust\ntranslation technique. In \\ourtool{}, the \\kg{} provides LLMs with\ncomprehensive pointer semantics from a global perspective, thus guiding LLMs\ntowards generating safe and idiomatic Rust code from a given C project. Our\nexperiments show that \\ourtool{} reduces unsafe usages in translated Rust by\n99.9\\% compared to both rule-based translation and traditional LLM-based\nrewriting, while achieving an average 29.3\\% higher functional correctness than\nthose fuzzing-enhanced LLM methods.", "AI": {"tldr": "A novel C-Rust Pointer Knowledge Graph approach that enables project-level C-to-Rust translation by providing LLMs with global pointer semantics, significantly reducing unsafe code and improving functional correctness.", "motivation": "Existing LLM-based C-to-Rust translation methods struggle with project-level translation due to lack of global perspective on pointer usage, leading to unsafe Rust code generation.", "method": "Proposes C-Rust Pointer Knowledge Graph that enriches code-dependency graph with pointer-usage information (points-to flows, struct mapping) and Rust-oriented annotations (ownership, mutability, nullability, lifetime), then synthesizes this KG with LLMs for translation.", "result": "Reduces unsafe usages in translated Rust by 99.9% compared to rule-based and traditional LLM methods, and achieves 29.3% higher functional correctness than fuzzing-enhanced LLM methods.", "conclusion": "The proposed KG-guided approach effectively addresses pointer translation challenges in project-level C-to-Rust conversion, enabling generation of safer and more correct Rust code."}}
{"id": "2510.11039", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.11039", "abs": "https://arxiv.org/abs/2510.11039", "authors": ["Yifeng Zhu", "Xianlin Zhao", "Xutian Li", "Yanzhen Zou", "Haizhuo Yuan", "Yue Wang", "Bing Xie"], "title": "RepoSummary: Feature-Oriented Summarization and Documentation Generation for Code Repositories", "comment": null, "summary": "Repository summarization is a crucial research question in development and\nmaintenance for software engineering. Existing repository summarization\ntechniques primarily focus on summarizing code according to the directory tree,\nwhich is insufficient for tracing high-level features to the methods that\ncollaboratively implement them. To address these limitations, we propose\nRepoSummary, a feature-oriented code repository summarization approach that\nsimultaneously generates repository documentation automatically. Furthermore,\nit establishes more accurate traceability links from functional features to the\ncorresponding code elements, enabling developers to rapidly locate relevant\nmethods and files during code comprehension and maintenance. Comprehensive\nexperiments against the state-of-the-art baseline (HGEN) demonstrate that\nRepoSummary achieves higher feature coverage and more accurate traceability. On\naverage, it increases the rate of completely covered features in manual\ndocumentation from 61.2% to 71.1%, improves file-level traceability recall from\n29.9% to 53.0%, and generates documentation that is more conceptually\nconsistent, easier to understand, and better formatted than that produced by\nexisting approaches.", "AI": {"tldr": "RepoSummary is a feature-oriented code repository summarization approach that automatically generates documentation and establishes accurate traceability links from functional features to code elements, outperforming existing methods.", "motivation": "Existing repository summarization techniques focus on directory tree structure, which is insufficient for tracing high-level features to the collaborative methods that implement them, limiting code comprehension and maintenance.", "method": "Proposed RepoSummary, a feature-oriented approach that simultaneously generates repository documentation and establishes traceability links from functional features to corresponding code elements.", "result": "RepoSummary increases feature coverage from 61.2% to 71.1%, improves file-level traceability recall from 29.9% to 53.0%, and generates more conceptually consistent, understandable, and better-formatted documentation than state-of-the-art baseline HGEN.", "conclusion": "RepoSummary effectively addresses limitations of existing repository summarization by providing feature-oriented documentation with improved traceability links, enhancing code comprehension and maintenance capabilities."}}
{"id": "2510.11059", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.11059", "abs": "https://arxiv.org/abs/2510.11059", "authors": ["Jian Wang", "Xiaofei Xie", "Qiang Hu", "Shangqing Liu", "Jiongchi Yu", "Jiaolong Klong", "Yi Li"], "title": "Defects4C: Benchmarking Large Language Model Repair Capability with C/C++ Bugs", "comment": "ASE-2025 main research paper", "summary": "Automated Program Repair (APR) plays a critical role in enhancing the quality\nand reliability of software systems. While substantial progress has been made\nin Java-based APR, largely facilitated by benchmarks like Defects4J, there\nremains a significant gap in research on C/C++ program repair, despite the\nwidespread use of C/C++ and the prevalence of associated vulnerabilities. This\ngap is primarily due to the lack of high-quality, open-source benchmarks\ntailored for C/C++.\n  To address this issue, we introduce Defects4C, a comprehensive and executable\nbenchmark specifically designed for C/C++ program repair. Our dataset is\nconstructed from real-world C/C++ repositories and includes a large collection\nof bug-relevant commits (9M in total), 248 high-quality buggy functions, and\n102 vulnerable functions, all paired with test cases for reproduction. These\nresources enable rigorous evaluation of repair techniques and support the\nretraining of learning-based approaches for enhanced performance.\n  Using Defects4C, we conduct a comprehensive empirical study evaluating the\neffectiveness of 24 state-of-the-art large language models (LLMs) in repairing\nC/C++ faults. Our findings offer valuable insights into the strengths and\nlimitations of current LLM-based APR techniques in this domain, highlighting\nboth the need for more robust methods and the critical role of Defects4C in\nadvancing future research", "AI": {"tldr": "Defects4C is introduced as a comprehensive benchmark for C/C++ program repair, addressing the gap in research compared to Java-based APR. It includes 9M bug-relevant commits, 248 buggy functions, and 102 vulnerable functions with test cases.", "motivation": "There is a significant gap in C/C++ program repair research despite widespread use and vulnerability prevalence, primarily due to lack of high-quality benchmarks like Defects4J for Java.", "method": "Constructed Defects4C from real-world C/C++ repositories with bug-relevant commits, buggy functions, and vulnerable functions paired with test cases. Used this benchmark to evaluate 24 state-of-the-art LLMs for C/C++ fault repair.", "result": "The empirical study provides insights into the strengths and limitations of current LLM-based APR techniques for C/C++, highlighting both the effectiveness and areas needing improvement.", "conclusion": "Defects4C fills a critical gap in C/C++ program repair research and enables rigorous evaluation of repair techniques, supporting future advancements in this domain."}}
{"id": "2510.11076", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.11076", "abs": "https://arxiv.org/abs/2510.11076", "authors": ["Lingyue Fu", "Haowei Yuan", "Datong Chen", "Xinyi Dai", "Qingyao Li", "Weinan Zhang", "Weiwen Liu", "Yong Yu"], "title": "DebugTA: An LLM-Based Agent for Simplifying Debugging and Teaching in Programming Education", "comment": null, "summary": "In programming education, Debugging and Teaching (DT) task is a common\nscenario where students receive assistance in correcting their erroneous code.\nThe task involves multiple inputs, including erroneous code, error messages,\nreference solutions, and the question description, with the goal of generating\nmodification suggestions to the erroneous code. However, two key challenges\nhinder the effectiveness of existing approaches. Firstly, the complexity and\nheterogeneity of inputs inherent in DT tasks significantly elevate the\nreasoning challenges faced by LLMs. Second, existing approaches often fail to\nfully leverage the availability of standard code in DT tasks, forcing models to\nrely solely on complex multi-step reasoning, which limits the potential of LLMs\nin addressing DT tasks effectively. To address these challenges, we propose\nDebugTA, a novel LLM-based debugging and teaching agent with specialized tools\nfor standard code retrieval, variable substitution to align reference code, and\nan external compiler for real-time code analysis. Guided by explicit\npedagogical and debugging principles, DebugTA acts as an agent that decomposes\na complex task into sequential LLM interactions, each utilizing distinct tools\nfor specific subtasks, thereby simplifying the logical reasoning at each step\nand reducing overall reasoning complexity. Furthermore, DebugTA utilizes tool\ncalls to align the standard code with the erroneous code as much as possible,\nallowing the LLM to focus on logic errors within the erroneous code and\nimproving the accuracy of the generated suggestions. To rigorously assess the\nquality of modification suggestions, we introduce a student simulator-teacher\ninteraction paradigm. Experimental results on three real-world code datasets\ndemonstrate that DebugTA consistently improves teaching effectiveness while\nsignificantly reducing computational costs.", "AI": {"tldr": "DebugTA is an LLM-based agent that uses specialized tools for code debugging and teaching, addressing challenges in programming education by decomposing complex tasks and leveraging standard code through retrieval, variable substitution, and real-time compilation.", "motivation": "Existing approaches struggle with the complexity and heterogeneity of inputs in debugging and teaching tasks, and fail to fully utilize available standard code, limiting LLMs' effectiveness in helping students correct erroneous code.", "method": "DebugTA uses an agent-based approach with specialized tools including standard code retrieval, variable substitution to align reference code, and an external compiler for real-time analysis. It decomposes tasks into sequential LLM interactions guided by pedagogical principles.", "result": "Experimental results on three real-world code datasets show that DebugTA consistently improves teaching effectiveness while significantly reducing computational costs compared to existing approaches.", "conclusion": "DebugTA effectively addresses the challenges in debugging and teaching tasks by simplifying reasoning complexity through tool-based decomposition and better utilization of standard code, leading to improved accuracy and efficiency in generating modification suggestions."}}
{"id": "2510.11138", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.11138", "abs": "https://arxiv.org/abs/2510.11138", "authors": ["Zitao Wang", "Zhimin Zhao", "Michael W. Godfrey"], "title": "What Slows Down FMware Development? An Empirical Study of Developer Challenges and Resolution Times", "comment": null, "summary": "Foundation Models (FMs), such as OpenAI's GPT, are fundamentally transforming\nthe practice of software engineering by enabling the development of\n\\emph{FMware} -- applications and infrastructures built around these models.\nFMware systems now support tasks such as code generation, natural-language\ninteraction, knowledge integration, and multi-modal content creation,\nunderscoring their disruptive impact on current software engineering workflows.\nHowever, the design, implementation, and evolution of FMware present\nsignificant new challenges, particularly across cloud-based and on-premise\nplatforms where goals, processes, and tools often diverge from those of\ntraditional software development.\n  To our knowledge, this is the first large-scale analysis of FMware\ndevelopment across both cloud-based platforms and open-source repositories. We\nempirically investigate the FMware ecosystem through three focus areas: (1) the\nmost common application domains of FMware, (2) the key challenges developers\nencounter, and (3) the types of issues that demand the greatest effort to\nresolve. Our analysis draws on data from GitHub repositories and from leading\nFMware platforms, including HuggingFace, GPTStore, Ora, and Poe. Our findings\nreveal a strong focus on education, content creation, and business strategy,\nalongside persistent technical challenges in memory management, dependency\nhandling, and tokenizer configuration. On GitHub, bug reports and core\nfunctionality issues are the most frequently reported problems, while code\nreview, similarity search, and prompt template design are the most\ntime-consuming to resolve.\n  By uncovering developer practices and pain points, this study points to\nopportunities to improve FMware tools, workflows, and community support, and\nprovides actionable insights to help guide the future of FMware development.", "AI": {"tldr": "This paper presents the first large-scale analysis of FMware (Foundation Model-based software) development across cloud platforms and open-source repositories, examining application domains, developer challenges, and effort-intensive issues.", "motivation": "Foundation Models are transforming software engineering by enabling FMware development, but this new paradigm presents significant challenges that differ from traditional software development across cloud and on-premise platforms.", "method": "Empirical investigation using data from GitHub repositories and leading FMware platforms (HuggingFace, GPTStore, Ora, Poe) to analyze three focus areas: common application domains, key developer challenges, and types of issues requiring most effort.", "result": "Findings show strong focus on education, content creation, and business strategy domains. Key technical challenges include memory management, dependency handling, and tokenizer configuration. Bug reports and core functionality issues are most frequent on GitHub, while code review, similarity search, and prompt template design are most time-consuming.", "conclusion": "The study uncovers developer practices and pain points to improve FMware tools, workflows, and community support, providing actionable insights for the future of FMware development."}}
{"id": "2510.11179", "categories": ["cs.SE", "astro-ph.IM"], "pdf": "https://arxiv.org/pdf/2510.11179", "abs": "https://arxiv.org/abs/2510.11179", "authors": ["David Georg Reichelt", "Shinhyung Yang", "Wilhelm Hasselbring"], "title": "Interoperability From OpenTelemetry to Kieker: Demonstrated as Export from the Astronomy Shop", "comment": "Accepted for publication in Symposium on Software Performance 2025", "summary": "The observability framework Kieker provides a range of analysis capabilities,\nbut it is currently only able to instrument a smaller selection of languages\nand technologies, including Java, C, Fortran, and Python. The OpenTelemetry\nstandard aims for providing reference implementations for most programming\nlanguages, including C# and JavaScript, that are currently not supported by\nKieker. In this work, we describe how to transform OpenTelemetry tracing data\ninto the Kieker framework. Thereby, it becomes possible to create for example\ncall trees from OpenTelemetry instrumentations. We demonstrate the usability of\nour approach by visualizing trace data of the Astronomy Shop, which is an\nOpenTelemetry demo application.", "AI": {"tldr": "This paper presents a method to transform OpenTelemetry tracing data into the Kieker observability framework, enabling analysis of languages like C# and JavaScript that Kieker doesn't natively support.", "motivation": "Kieker has limited language support (Java, C, Fortran, Python) while OpenTelemetry supports many more languages including C# and JavaScript. There's a need to bridge these frameworks to leverage Kieker's analysis capabilities with OpenTelemetry's broader language coverage.", "method": "The authors developed a transformation approach to convert OpenTelemetry tracing data into Kieker's format, enabling the creation of call trees and other analysis features from OpenTelemetry instrumentations.", "result": "The approach was successfully demonstrated using the Astronomy Shop OpenTelemetry demo application, showing that trace data can be visualized and analyzed through Kieker after transformation.", "conclusion": "The integration allows Kieker to analyze applications instrumented with OpenTelemetry, extending Kieker's capabilities to languages it doesn't natively support while maintaining its powerful analysis features."}}
{"id": "2510.11310", "categories": ["cs.SE", "cs.OS", "cs.PF", "D.2.8; D.4.8; C.4"], "pdf": "https://arxiv.org/pdf/2510.11310", "abs": "https://arxiv.org/abs/2510.11310", "authors": ["Shinhyung Yang", "David Georg Reichelt", "Henrik Ingo", "Wilhelm Hasselbring"], "title": "Detection of Performance Changes in MooBench Results Using Nyrki\u00f6 on GitHub Actions", "comment": "3 pages, 3 figures, 16th Symposium on Software Performance\n  (https://www.performance-symposium.org/)", "summary": "In GitHub with its 518 million hosted projects, performance changes within\nthese projects are highly relevant to the project's users. Although performance\nmeasurement is supported by GitHub CI/CD, performance change detection is a\nchallenging topic.\n  In this paper, we demonstrate how we incorporated Nyrki\\\"o to MooBench. Prior\nto this work, Moobench continuously ran on GitHub virtual machines, measuring\noverhead of tracing agents, but without change detection. By adding the upload\nof the measurements to the Nyrki\\\"o change detection service, we made it\npossible to detect performance changes. We identified one major performance\nregression and examined the performance change in depth. We report that (1) it\nis reproducible with GitHub actions, and (2) the performance regression is\ncaused by a Linux Kernel version change.", "AI": {"tldr": "The paper integrates Nyrki\u00f6 change detection into MooBench to identify performance changes in GitHub projects, successfully detecting a major regression caused by a Linux Kernel version update.", "motivation": "Performance changes in GitHub's 518 million projects are critical for users, but detecting these changes is challenging despite GitHub CI/CD supporting performance measurement.", "method": "Incorporated Nyrki\u00f6 change detection service into MooBench, which previously only measured tracing agent overhead without change detection. Added upload of measurements to Nyrki\u00f6 for change detection capability.", "result": "Successfully identified one major performance regression. The regression was reproducible with GitHub actions and was caused by a Linux Kernel version change.", "conclusion": "The integration of Nyrki\u00f6 with MooBench enables effective detection of performance changes in GitHub projects, demonstrating practical value in identifying performance regressions caused by system-level changes."}}
{"id": "2510.11516", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.11516", "abs": "https://arxiv.org/abs/2510.11516", "authors": ["Jeena Javahar", "Tanya Budhrani", "Manaal Basha", "Cleidson R. B. de Souza", "Ivan Beschastnikh", "Gema Rodriguez-Perez"], "title": "Cracking CodeWhisperer: Analyzing Developers' Interactions and Patterns During Programming Tasks", "comment": "VL/HCC 2025 Short Paper", "summary": "The use of AI code-generation tools is becoming increasingly common, making\nit important to understand how software developers are adopting these tools. In\nthis study, we investigate how developers engage with Amazon's CodeWhisperer,\nan LLM-based code-generation tool. We conducted two user studies with two\ngroups of 10 participants each, interacting with CodeWhisperer - the first to\nunderstand which interactions were critical to capture and the second to\ncollect low-level interaction data using a custom telemetry plugin. Our\nmixed-methods analysis identified four behavioral patterns: 1) incremental code\nrefinement, 2) explicit instruction using natural language comments, 3)\nbaseline structuring with model suggestions, and 4) integrative use with\nexternal sources. We provide a comprehensive analysis of these patterns .", "AI": {"tldr": "This study investigates how developers use Amazon's CodeWhisperer, identifying four key behavioral patterns in AI code-generation tool adoption.", "motivation": "Understanding how software developers are adopting AI code-generation tools as their use becomes increasingly common.", "method": "Conducted two user studies with 10 participants each, using mixed-methods analysis including custom telemetry plugin for low-level interaction data collection.", "result": "Identified four behavioral patterns: incremental code refinement, explicit instruction using natural language comments, baseline structuring with model suggestions, and integrative use with external sources.", "conclusion": "Provides comprehensive analysis of developer interaction patterns with CodeWhisperer, offering insights into AI code-generation tool adoption behaviors."}}
{"id": "2510.11536", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.11536", "abs": "https://arxiv.org/abs/2510.11536", "authors": ["Manaal Basha", "Aime\u00ea M. Ribeiro", "Jeena Javahar", "Cleidson R. B. de Souza", "Gema Rodr\u00edguez-P\u00e9rez"], "title": "CodeWatcher: IDE Telemetry Data Extraction Tool for Understanding Coding Interactions with LLMs", "comment": "ICSME 2025 Tool Demonstration Track", "summary": "Understanding how developers interact with code generation tools (CGTs)\nrequires detailed, real-time data on programming behavior which is often\ndifficult to collect without disrupting workflow. We present\n\\textit{CodeWatcher}, a lightweight, unobtrusive client-server system designed\nto capture fine-grained interaction events from within the Visual Studio Code\n(VS Code) editor. \\textit{CodeWatcher} logs semantically meaningful events such\nas insertions made by CGTs, deletions, copy-paste actions, and focus shifts,\nenabling continuous monitoring of developer activity without modifying user\nworkflows. The system comprises a VS Code plugin, a Python-based RESTful API,\nand a MongoDB backend, all containerized for scalability and ease of\ndeployment. By structuring and timestamping each event, \\textit{CodeWatcher}\nenables post-hoc reconstruction of coding sessions and facilitates rich\nbehavioral analyses, including how and when CGTs are used during development.\nThis infrastructure is crucial for supporting research on responsible AI,\ndeveloper productivity, and the human-centered evaluation of CGTs. Please find\nthe demo, diagrams, and tool here: https://osf.io/j2kru/overview.", "AI": {"tldr": "CodeWatcher is a lightweight system that captures fine-grained developer interactions with code generation tools in VS Code without disrupting workflow.", "motivation": "Understanding developer interactions with code generation tools requires real-time data that's difficult to collect without disrupting workflow.", "method": "A client-server system with VS Code plugin, Python RESTful API, and MongoDB backend that logs semantically meaningful events like insertions, deletions, copy-paste actions, and focus shifts.", "result": "Enables continuous monitoring of developer activity, post-hoc reconstruction of coding sessions, and rich behavioral analyses of CGT usage.", "conclusion": "This infrastructure supports research on responsible AI, developer productivity, and human-centered evaluation of code generation tools."}}
{"id": "2510.11658", "categories": ["cs.SE", "97P50", "D.2.5; K.3.2"], "pdf": "https://arxiv.org/pdf/2510.11658", "abs": "https://arxiv.org/abs/2510.11658", "authors": ["Florian Oberm\u00fcller", "Gordon Fraser"], "title": "Automatically Generating Questions About Scratch Programs", "comment": "Accepted at CompEd 2025", "summary": "When learning to program, students are usually assessed based on the code\nthey wrote. However, the mere completion of a programming task does not\nguarantee actual comprehension of the underlying concepts. Asking learners\nquestions about the code they wrote has therefore been proposed as a means to\nassess program comprehension. As creating targeted questions for individual\nstudent programs can be tedious and challenging, prior work has proposed to\ngenerate such questions automatically. In this paper we generalize this idea to\nthe block-based programming language Scratch. We propose a set of 30 different\nquestions for Scratch code covering an established program comprehension model,\nand extend the LitterBox static analysis tool to automatically generate\ncorresponding questions for a given Scratch program. On a dataset of 600,913\nprojects we generated 54,118,694 questions automatically. Our initial\nexperiments with 34 ninth graders demonstrate that this approach can indeed\ngenerate meaningful questions for Scratch programs, and we find that the\nability of students to answer these questions on their programs relates to\ntheir overall performance.", "AI": {"tldr": "The paper presents an automated system for generating program comprehension questions for Scratch code, extending the LitterBox tool to create 30 different question types based on an established comprehension model.", "motivation": "Current assessment methods in programming education focus on code completion but don't guarantee actual understanding of concepts. Manual question creation for individual student programs is tedious and challenging.", "method": "Extended the LitterBox static analysis tool to automatically generate 30 different question types for Scratch programs, covering an established program comprehension model. Tested on 600,913 projects generating over 54 million questions.", "result": "Successfully generated 54,118,694 questions automatically. Initial experiments with 34 ninth graders showed the approach generates meaningful questions, and students' ability to answer them correlates with their overall performance.", "conclusion": "Automated question generation for Scratch programs is feasible and effective for assessing program comprehension, with student performance on these questions relating to their overall programming ability."}}
